import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-dAsMf_Ww.js";const p={},o=e(`<h2 id="gerador-de-cpf" tabindex="-1"><a class="header-anchor" href="#gerador-de-cpf" aria-hidden="true">#</a> Gerador de CPF</h2><p>Crie uma função que gera um CPF válido.</p><details><summary>Solução</summary><h3 id="codigo" tabindex="-1"><a class="header-anchor" href="#codigo" aria-hidden="true">#</a> Código</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">gerarCPF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">function</span> <span class="token function">gerarDigitoVerificador</span><span class="token punctuation">(</span><span class="token parameter">cpfParcial</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">let</span> soma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
          <span class="token keyword">let</span> peso <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cpfParcial<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          soma <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>cpfParcial<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> peso<span class="token punctuation">;</span>
          peso<span class="token operator">--</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

          <span class="token keyword">const</span> resto <span class="token operator">=</span> soma <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> digito <span class="token operator">=</span> <span class="token punctuation">(</span>resto <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">11</span> <span class="token operator">-</span> resto<span class="token punctuation">;</span>
          <span class="token keyword">return</span> digito<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Gera os nove primeiros dígitos do CPF</span>
      <span class="token keyword">let</span> cpfParcial <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cpfParcial <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Gera os dois dígitos verificadores</span>
      <span class="token keyword">const</span> digito1 <span class="token operator">=</span> <span class="token function">gerarDigitoVerificador</span><span class="token punctuation">(</span>cpfParcial<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> digito2 <span class="token operator">=</span> <span class="token function">gerarDigitoVerificador</span><span class="token punctuation">(</span>cpfParcial <span class="token operator">+</span> digito1<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Retorna o CPF completo</span>
      <span class="token keyword">return</span> cpfParcial <span class="token operator">+</span> digito1 <span class="token operator">+</span> digito2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Exemplo de uso</span>
  <span class="token keyword">const</span> cpfGerado <span class="token operator">=</span> <span class="token function">gerarCPF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;CPF gerado:&#39;</span><span class="token punctuation">,</span> cpfGerado<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao" aria-hidden="true">#</a> Explicação</h3><p>Nesta função, primeiro geramos os nove primeiros dígitos do CPF aleatoriamente. Em seguida, calculamos os dois dígitos verificadores usando a função gerarDigitoVerificador. Finalmente, combinamos todos os elementos para formar um CPF válido.</p><p>Por favor, note que este CPF gerado é apenas para fins educacionais e não deve ser utilizado para atividades ilegais ou fraudulentas.</p><h3 id="mascarar-e-desmascarar-cpf" tabindex="-1"><a class="header-anchor" href="#mascarar-e-desmascarar-cpf" aria-hidden="true">#</a> Mascarar e Desmascarar CPF</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">formatarCPF</span><span class="token punctuation">(</span><span class="token parameter">cpf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Adiciona a máscara ao CPF</span>
      <span class="token keyword">return</span> cpf<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d{3})(\\d{3})(\\d{3})(\\d{2})</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1.$2.$3-$4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">removerMascaraCPF</span><span class="token punctuation">(</span><span class="token parameter">cpf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Remove a máscara do CPF</span>
      <span class="token keyword">return</span> cpf<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\d]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Exemplo de uso com o CPF gerado</span>
  <span class="token keyword">const</span> cpfGerado <span class="token operator">=</span> <span class="token function">gerarCPF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> cpfFormatado <span class="token operator">=</span> <span class="token function">formatarCPF</span><span class="token punctuation">(</span>cpfGerado<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> cpfSemMascara <span class="token operator">=</span> <span class="token function">removerMascaraCPF</span><span class="token punctuation">(</span>cpfFormatado<span class="token punctuation">)</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;CPF gerado:&#39;</span><span class="token punctuation">,</span> cpfGerado<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;CPF formatado:&#39;</span><span class="token punctuation">,</span> cpfFormatado<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;CPF sem máscara:&#39;</span><span class="token punctuation">,</span> cpfSemMascara<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="explicacao-1" tabindex="-1"><a class="header-anchor" href="#explicacao-1" aria-hidden="true">#</a> Explicação</h4><p>A função formatarCPF adiciona a máscara ao CPF, e a função removerMascaraCPF remove a máscara de um CPF formatado. Os exemplos demonstram como utilizar essas funções em conjunto com o CPF gerado pela função gerarCPF. Você pode testar as funções com outros CPFs conforme necessário.</p></details>`,3),t=[o];function c(i,l){return s(),a("div",null,t)}const d=n(p,[["render",c],["__file","exercise21.html.vue"]]);export{d as default};
