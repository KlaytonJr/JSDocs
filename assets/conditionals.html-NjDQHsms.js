import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,f as e}from"./app-6QF_qIwV.js";const o={},i=e(`<h1 id="condicionais" tabindex="-1"><a class="header-anchor" href="#condicionais" aria-hidden="true">#</a> Condicionais</h1><h2 id="if-else-if-e-else" tabindex="-1"><a class="header-anchor" href="#if-else-if-e-else" aria-hidden="true">#</a> If, else if e else</h2><p>Em JavaScript, as estruturas condicionais são usadas para controlar o fluxo do programa com base em condições booleanas. As principais estruturas condicionais são <code>if</code>, <code>else if</code> e <code>else</code>. Aqui está um resumo sobre essas construções:</p><ol><li><p><strong>if:</strong></p><ul><li>A declaração <code>if</code> é usada para executar um bloco de código se a condição associada a ela for avaliada como verdadeira (true).</li><li>Sintaxe:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condicao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código a ser executado se a condição for verdadeira</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>else if:</strong></p><ul><li>A declaração <code>else if</code> é usada para fornecer condições adicionais a serem verificadas se a condição anterior (<code>if</code> ou <code>else if</code> anterior) for falsa.</li><li>Você pode ter várias cláusulas <code>else if</code>.</li><li>Sintaxe:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condicao1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código a ser executado se a condição1 for verdadeira</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>condicao2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código a ser executado se a condição2 for verdadeira</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código a ser executado se nenhuma das condições anteriores for verdadeira</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>else:</strong></p><ul><li>A declaração <code>else</code> é usada para fornecer um bloco de código a ser executado se todas as condições anteriores (<code>if</code> e <code>else if</code>) forem falsas.</li><li>Sintaxe:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>condicao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código a ser executado se a condição for verdadeira</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código a ser executado se a condição for falsa</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p>Exemplo completo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> numero <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>numero <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;O número é positivo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numero <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;O número é zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;O número é negativo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Além disso, é importante mencionar o operador ternário (<code>? :</code>), que é uma forma concisa de expressar estruturas condicionais em uma única linha. Por exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> resultado <span class="token operator">=</span> <span class="token punctuation">(</span>condicao<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;Verdadeiro&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Falso&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Essas estruturas condicionais são fundamentais para controlar o fluxo de execução em um programa JavaScript e são amplamente utilizadas para tomar decisões com base em diferentes cenários.</p><h2 id="operadores" tabindex="-1"><a class="header-anchor" href="#operadores" aria-hidden="true">#</a> Operadores</h2><p>Em JavaScript, as estruturas de comparação são utilizadas para comparar valores e tomar decisões com base nessas comparações. Aqui está um resumo das principais estruturas de comparação:</p><ol><li><p><strong>Operadores de Comparação:</strong></p><ul><li>JavaScript fornece vários operadores de comparação, como <code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> e <code>&lt;=</code>.</li><li>Os operadores <code>==</code> e <code>!=</code> comparam os valores, enquanto <code>===</code> e <code>!==</code> comparam os valores e os tipos.</li><li>Exemplo:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true (compara os valores)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (compara valores e tipos)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="diferenca-entre-igualdade-e-igualdade-estrita" tabindex="-1"><a class="header-anchor" href="#diferenca-entre-igualdade-e-igualdade-estrita" aria-hidden="true">#</a> Diferença entre <code>Igualdade</code> e <code>Igualdade Estrita</code></h4><p>Em JavaScript, <code>==</code> (igualdade) e <code>===</code> (igualdade estrita) são operadores de comparação utilizados para verificar a igualdade entre dois valores. No entanto, há uma diferença crucial entre eles:</p><ol><li><p><strong><code>==</code> (Igualdade):</strong></p><ul><li>O operador <code>==</code> verifica apenas a igualdade de valores, ignorando os tipos das variáveis.</li><li>Se os valores são de tipos diferentes, o JavaScript tentará converter um ou ambos os valores para um tipo comum antes de fazer a comparação.</li><li>Este processo de conversão pode levar a resultados inesperados, especialmente quando lidando com diferentes tipos de dados.</li><li>Exemplo:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">5</span> <span class="token operator">==</span> <span class="token string">&quot;5&quot;</span>    <span class="token comment">// true (JavaScript converte a string para número)</span>
<span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span>   <span class="token comment">// true (JavaScript converte o booleano para número)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>===</code> (Igualdade Estrita):</strong></p><ul><li>O operador <code>===</code> verifica tanto a igualdade de valores quanto de tipos. Os valores devem ser do mesmo tipo e ter o mesmo valor para a condição ser verdadeira.</li><li>Não ocorre conversão automática de tipos, o que pode tornar as comparações mais previsíveis.</li><li>Exemplo:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">5</span> <span class="token operator">===</span> <span class="token string">&quot;5&quot;</span>   <span class="token comment">// false (tipos diferentes)</span>
<span class="token boolean">true</span> <span class="token operator">===</span> <span class="token number">1</span>  <span class="token comment">// false (tipos diferentes)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p>Em geral, é recomendável usar <code>===</code> (igualdade estrita) sempre que possível, pois isso ajuda a evitar resultados inesperados devido à conversão automática de tipos. Isso ajuda a garantir que tanto os valores quanto os tipos sejam idênticos para que a condição seja considerada verdadeira. A igualdade estrita é considerada uma prática mais segura e menos propensa a erros em comparações de valores em JavaScript.</p></li><li><p><strong>Operadores Lógicos:</strong></p><ul><li>Os operadores lógicos, como <code>&amp;&amp;</code> (AND), <code>||</code> (OR) e <code>!</code> (NOT), são usados para combinar ou negar condições.</li><li>Exemplo:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> idade <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> possuiCarteiraDeMotorista <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>idade <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> possuiCarteiraDeMotorista<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Pode dirigir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>Operador Ternário:</strong></p><ul><li>O operador ternário (<code>? :</code>) é uma forma concisa de expressar uma estrutura condicional em uma única linha.</li><li>Exemplo:<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> resultado <span class="token operator">=</span> <span class="token punctuation">(</span>idade <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;Maior de idade&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Menor de idade&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li></ol><p>Essas estruturas de comparação são fundamentais para criar lógica condicional em programas JavaScript, permitindo que o código tome decisões dinâmicas com base nas condições encontradas durante a execução.</p><h2 id="switch-case" tabindex="-1"><a class="header-anchor" href="#switch-case" aria-hidden="true">#</a> Switch Case</h2><ul><li><p>A estrutura <code>switch</code> é usada quando se deseja comparar uma expressão com múltiplos valores possíveis e executar diferentes blocos de código com base nesses valores.</p></li><li><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> diaDaSemana <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>diaDaSemana<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Domingo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Segunda-feira&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// ... outros casos ...</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Dia inválido&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>Cada condição é verificada e, se for cumprida, será executado o que estiver especificado dentro de cada case.</p><p>Normalmente, depois das instruções de cada case, é incluída a sentença break para interromper a execução do switch, mesmo que não seja obrigatório.</p><p>O que acontece se nenhum valor da variável do switch corresponde aos valores definidos em algum dos case?</p><p>Nesse caso, se utiliza o valor default para indicar as instruções que serão executadas quando nenhuma condição anterior for cumprida.</p>`,19),t=[i];function c(p,r){return s(),n("div",null,t)}const u=a(o,[["render",c],["__file","conditionals.html.vue"]]);export{u as default};
