import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,f as e}from"./app-dAsMf_Ww.js";const t={},o=e(`<h2 id="troca-de-valores" tabindex="-1"><a class="header-anchor" href="#troca-de-valores" aria-hidden="true">#</a> Troca de Valores</h2><p>Crie um algoritmo que troque os valores de duas variáveis.</p><details><summary>Solução 1</summary><h3 id="codigo" tabindex="-1"><a class="header-anchor" href="#codigo" aria-hidden="true">#</a> Código</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Antes da troca: a =&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">&#39;e b =&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Troca de valores usando uma variável temporária</span>
  <span class="token keyword">let</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
  a <span class="token operator">=</span> b<span class="token punctuation">;</span>
  b <span class="token operator">=</span> temp<span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Após a troca: a =&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">&#39;e b =&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao" aria-hidden="true">#</a> Explicação</h3><p>Nesta solução, usamos uma variável temporária (temp) para armazenar temporariamente o valor de uma das variáveis enquanto trocamos os valores das variáveis a e b.</p></details><br><details><summary>Solução 2</summary><h3 id="codigo-1" tabindex="-1"><a class="header-anchor" href="#codigo-1" aria-hidden="true">#</a> Código</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Antes da troca: a =&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">&#39;e b =&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Troca de valores sem variável temporária usando desestruturação</span>
  <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Após a troca: a =&#39;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token string">&#39;e b =&#39;</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="explicacao-1" tabindex="-1"><a class="header-anchor" href="#explicacao-1" aria-hidden="true">#</a> Explicação</h3><p>Nesta solução, usamos a desestruturação de arrays para trocar os valores das variáveis a e b sem a necessidade de uma variável temporária. Isso é possível ao criar um array [b, a] e desestruturá-lo na ordem inversa nas variáveis a e b.</p></details>`,5),p=[o];function c(i,l){return s(),n("div",null,p)}const d=a(t,[["render",c],["__file","exercise7.html.vue"]]);export{d as default};
