import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-nb1Fahdj.js";const o={},p=e(`<h1 id="operadores-avancados" tabindex="-1"><a class="header-anchor" href="#operadores-avancados" aria-hidden="true">#</a> Operadores Avançados</h1><h2 id="sugar-syntax" tabindex="-1"><a class="header-anchor" href="#sugar-syntax" aria-hidden="true">#</a> Sugar Syntax</h2><p>É o nome dado aos operadores avançados que funcionam como simplificações de tarefas mais complexas.</p><h2 id="operadores" tabindex="-1"><a class="header-anchor" href="#operadores" aria-hidden="true">#</a> Operadores</h2><p>Os operadores <code>++</code> e <code>--</code> são operadores de incremento e decremento, respectivamente, em JavaScript. Eles são usados para aumentar ou diminuir o valor de uma variável numérica.</p><h3 id="_1-uso-de-incremento" tabindex="-1"><a class="header-anchor" href="#_1-uso-de-incremento" aria-hidden="true">#</a> <strong>1. Uso de <code>++</code> (Incremento):</strong></h3><ul><li><p><strong>Antes da Variável (<code>++x</code>):</strong></p><ul><li>Incrementa o valor da variável antes de ser usado na expressão.</li><li>Conhecido como pré-incremento.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">++</span>x<span class="token punctuation">;</span> <span class="token comment">// x é incrementado antes de ser atribuído a y</span>
<span class="token comment">// x agora é 6, y é 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Depois da Variável (<code>x++</code>):</strong></p><ul><li>Usa o valor atual da variável na expressão e, em seguida, incrementa.</li><li>Conhecido como pós-incremento.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// x é atribuído a y antes de ser incrementado</span>
<span class="token comment">// x agora é 6, y é 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-uso-de-decremento" tabindex="-1"><a class="header-anchor" href="#_2-uso-de-decremento" aria-hidden="true">#</a> <strong>2. Uso de <code>--</code> (Decremento):</strong></h3><ul><li><p><strong>Antes da Variável (<code>--x</code>):</strong></p><ul><li>Decrementa o valor da variável antes de ser usado na expressão.</li><li>Conhecido como pré-decremento.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token operator">--</span>x<span class="token punctuation">;</span> <span class="token comment">// x é decrementado antes de ser atribuído a y</span>
<span class="token comment">// x agora é 4, y é 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Depois da Variável (<code>x--</code>):</strong></p><ul><li>Usa o valor atual da variável na expressão e, em seguida, decrementa.</li><li>Conhecido como pós-decremento.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">// x é atribuído a y antes de ser decrementado</span>
<span class="token comment">// x agora é 4, y é 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="observacoes-importantes" tabindex="-1"><a class="header-anchor" href="#observacoes-importantes" aria-hidden="true">#</a> <strong>Observações Importantes:</strong></h3><ul><li>O comportamento do pré-incremento/decremento e pós-incremento/decremento é uma distinção sutil, mas pode ter impacto em expressões complexas.</li><li>O uso adequado depende dos requisitos específicos da lógica de programação.</li><li>É importante entender que, em expressões mais complexas, o resultado pode variar dependendo do momento do incremento ou decremento.</li></ul><p>Em resumo, <code>++</code> e <code>--</code> são operadores úteis para incrementar ou decrementar variáveis numéricas em JavaScript. A escolha entre pré-incremento/decremento e pós-incremento/decremento depende das necessidades específicas da lógica de programação em questão.</p><h3 id="usando-para-simplificacao" tabindex="-1"><a class="header-anchor" href="#usando-para-simplificacao" aria-hidden="true">#</a> Usando para simplificação</h3><p>Operação: Aumentar o valor da variável em 1.</p><p>Temos diferentes opções para conseguir a mesma coisa. Exceto o primeiro exemplo, os outros dois são exemplos de sugar syntax, no qual são aplicados operadores que são criados para simplificar a tarefa com muito menos código.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>

<span class="token comment">// aumentar o valor em 1</span>
num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>

<span class="token comment">// primeira simplificação</span>
num <span class="token operator">+=</span> <span class="token number">1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>

<span class="token comment">// ou então</span>
num<span class="token operator">++</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operadores-ternarios" tabindex="-1"><a class="header-anchor" href="#operadores-ternarios" aria-hidden="true">#</a> Operadores ternários</h3><p>É uma simplificação da estrutura condicional if...else. É uma condicional que consiste de três partes:</p><ul><li>a condição,</li><li>o caso de execução se for verdadeira,</li><li>e o caso else, se não for verdadeira.</li></ul><p>Temos uma estrutura condicional padrão como essa:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> temperatura <span class="token operator">=</span> <span class="token number">31</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>temperatura <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dia quente!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dia agradável&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Então seguindo a sintaxe do operador ternário <code>condição ? caso1 : caso2</code> podemos fazer a mesma coisa com o condicional apenas com:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> temperatura <span class="token operator">=</span> <span class="token number">31</span>

temperatura <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token operator">?</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dia quente!&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Dia agradável&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A condição executa true ou false.</p><p>No caso 1, a instrução a ser executada é escrita se a condição for verdadeira, e no caso 2 se for falsa.</p><h3 id="operador-logico-and" tabindex="-1"><a class="header-anchor" href="#operador-logico-and" aria-hidden="true">#</a> Operador lógico AND (&amp;&amp;)</h3><p>É uma redução de um condicional que tenta executar (ou retornar) algo somente se a condição for verdadeira, reduz um if simples com um único bloco de execução:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> carrinho <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">// como já conhecemos</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>carrinho<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;O carrinho está vazio!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// com operador AND</span>
carrinho<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;O carrinho está vazio!&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operador-logico-or" tabindex="-1"><a class="header-anchor" href="#operador-logico-or" aria-hidden="true">#</a> Operador lógico OR (||)</h3><p>OR ( || ) é sintaticamente semelhante ao anterior, com a diferença de que consiste de dois operandos e não de uma condição explícita: operando1 || operando2.</p><p>Se não for falsy (se for diferente de 0, null, undefined, NAN, false, ou string vazio), o operador OR ( || ) retorna operador1. Caso contrário, retorna operador2.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Falsy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 40</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Falsy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Falsy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Olá Mundo&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Olá Mundo</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Falsy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Falsy</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token string">&quot;Falsy&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Falsy</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Exemplo de uso:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> usuario1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;Maria&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">16</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> usuario2 <span class="token operator">=</span> <span class="token keyword">null</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>usuario1 <span class="token operator">||</span> <span class="token string">&quot;O usuário não existe&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// { nome: &#39;Maria&#39;, idade: 16 }</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>usuario2 <span class="token operator">||</span> <span class="token string">&quot;O usuário não existe&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// O usuário não existe</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos usar a estrutura lógica OR para facilitar a inicialização de dados, como por exemplo:</p><ul><li>Exemplo sem OR</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> carrinho
<span class="token keyword">const</span> carrinhoAnterior <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;mouse&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;teclado&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;monitor&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>carrinhoAnterior<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    carrinho <span class="token operator">=</span> carrinhoAnterior
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    carrinho <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>carrinho<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Exemplo com OR</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> carrinhoAnterior <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;mouse&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;teclado&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;monitor&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> carrinho <span class="token operator">=</span> carrinhoAnterior <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>carrinho<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operador-nullish-coalescing" tabindex="-1"><a class="header-anchor" href="#operador-nullish-coalescing" aria-hidden="true">#</a> Operador Nullish Coalescing</h3><p>O Operador Nullish Coalescing (??) funciona da mesma forma que o Operador OR ( || ), a diferença é que admite mais valores como &#39;verdadeiros&#39;.</p><p>Neste caso, apenas obtemos Nullish em dois casos:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 40</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Nullish</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Nullish</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Olá Mundo&quot;</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// Olá Mundo</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// &quot;&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">NaN</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">??</span> <span class="token string">&quot;Nullish&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="acesso-condicional" tabindex="-1"><a class="header-anchor" href="#acesso-condicional" aria-hidden="true">#</a> Acesso condicional</h2><h3 id="acesso-condiconal-a-um-objeto" tabindex="-1"><a class="header-anchor" href="#acesso-condiconal-a-um-objeto" aria-hidden="true">#</a> Acesso condiconal a um objeto</h3><p>Se tentarmos acessar um objeto que não existe naturalmente, vamos ter um erro. Mas, se usarmos o operador ? sobre a referência de um objeto para condicionar seu acesso, podemos ter um melhor controle de erros na execução:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> usuario <span class="token operator">=</span> <span class="token keyword">null</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>usuario<span class="token punctuation">.</span>nome <span class="token operator">||</span> <span class="token string">&quot;O usuário não existe&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// Erro: &quot;Não é possível ler as propriedades de NULL&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>usuario<span class="token operator">?.</span>nome <span class="token operator">||</span> <span class="token string">&quot;O usuário não existe&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// &quot;O usuário não existe&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Também pode ser aplicado sobre propriedades que sejam objetos para avaliar sua existência/validade e controlar os fluxos do programa:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> usuario <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;Maria&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cursos</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">javascript</span><span class="token operator">:</span> <span class="token string">&quot;aprovado&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>usuario<span class="token operator">?.</span>cursos<span class="token operator">?.</span>javascript <span class="token operator">||</span> <span class="token string">&quot;A propriedade não existe&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// &quot;aprovado&quot;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>usuario<span class="token operator">?.</span>trabalhos<span class="token operator">?.</span>coderhouse <span class="token operator">||</span> <span class="token string">&quot;A propriedade não existe&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// &quot;A propriedade não existe&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="desestruturacao" tabindex="-1"><a class="header-anchor" href="#desestruturacao" aria-hidden="true">#</a> Desestruturação</h2><p>A desestruturação é uma característica poderosa em JavaScript que permite extrair valores de arrays ou propriedades de objetos de maneira concisa. Ela facilita a manipulação de dados e a atribuição de valores a variáveis. Vamos explorar a desestruturação em relação a arrays e objetos.</p><p>Declaramos variáveis e armazenamos nelas os valores das propriedades. Fazemos isso para trabalhar com <strong>imutabilidade</strong>, ou seja, usar esses valores sem o risco de alterar as propriedades do objeto.</p><p>Entretanto, podemos usar a desestruturação para simplificar e agilizar esse processo. Em que consiste? É uma técnica que permite declarar variáveis ​​onde se pode armazenar propriedades de um objeto de forma rápida e direta.</p><h3 id="alias" tabindex="-1"><a class="header-anchor" href="#alias" aria-hidden="true">#</a> Alias</h3><p>Para que a desestruturação funcione, deve haver correspondência com os nomes das propriedades do objeto.</p><p>No entanto, às vezes, os nomes das propriedades podem não ser muito descritivos para o uso que queremos dar a elas, portanto, podemos desestruturá-las com um alias, ou seja, declarar a variável com um nome alternativo após ter desestruturado o objeto.</p><p>Fazemos isso simplesmente com o operador : após o nome da propriedade.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">item_id</span><span class="token operator">:</span> <span class="token number">432</span><span class="token punctuation">,</span>
    <span class="token literal-property property">product_name</span><span class="token operator">:</span> <span class="token string">&quot;Some product&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">price_per_unit</span><span class="token operator">:</span> <span class="token number">5600</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">item_id</span><span class="token operator">:</span> id<span class="token punctuation">,</span>
    <span class="token literal-property property">product_name</span><span class="token operator">:</span> nome<span class="token punctuation">,</span>
    <span class="token literal-property property">price_per_unit</span><span class="token operator">:</span> preco
<span class="token punctuation">}</span> <span class="token operator">=</span> item

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment">// 432</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nome<span class="token punctuation">)</span> <span class="token comment">// &quot;Some product&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>preco<span class="token punctuation">)</span> <span class="token comment">// 5600</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="desestruturacao-com-arrays" tabindex="-1"><a class="header-anchor" href="#desestruturacao-com-arrays" aria-hidden="true">#</a> <strong>Desestruturação com Arrays:</strong></h3><h4 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>A desestruturação de arrays permite extrair valores com base na posição deles no array. Isso é feito atribuindo os valores a variáveis correspondentes.</p><h4 id="exemplo" tabindex="-1"><a class="header-anchor" href="#exemplo" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Sem desestruturação</span>
<span class="token keyword">const</span> numeros <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> primeiro <span class="token operator">=</span> numeros<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> segundo <span class="token operator">=</span> numeros<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Com desestruturação</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>primeiro<span class="token punctuation">,</span> segundo<span class="token punctuation">]</span> <span class="token operator">=</span> numeros<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>primeiro<span class="token punctuation">,</span> segundo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: 1 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="desestruturacao-com-objetos" tabindex="-1"><a class="header-anchor" href="#desestruturacao-com-objetos" aria-hidden="true">#</a> <strong>Desestruturação com Objetos:</strong></h3><h4 id="explicacao-1" tabindex="-1"><a class="header-anchor" href="#explicacao-1" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>A desestruturação de objetos permite extrair valores com base no nome das propriedades do objeto. As variáveis são atribuídas aos valores correspondentes.</p><h4 id="exemplo-1" tabindex="-1"><a class="header-anchor" href="#exemplo-1" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Sem desestruturação</span>
<span class="token keyword">const</span> pessoa <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nome <span class="token operator">=</span> pessoa<span class="token punctuation">.</span>nome<span class="token punctuation">;</span>
<span class="token keyword">const</span> idade <span class="token operator">=</span> pessoa<span class="token punctuation">.</span>idade<span class="token punctuation">;</span>

<span class="token comment">// Com desestruturação</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> nome<span class="token punctuation">,</span> idade <span class="token punctuation">}</span> <span class="token operator">=</span> pessoa<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nome<span class="token punctuation">,</span> idade<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Alice 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="desestruturacao-em-parametros-de-funcao" tabindex="-1"><a class="header-anchor" href="#desestruturacao-em-parametros-de-funcao" aria-hidden="true">#</a> <strong>Desestruturação em Parâmetros de Função:</strong></h3><h4 id="explicacao-2" tabindex="-1"><a class="header-anchor" href="#explicacao-2" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>A desestruturação pode ser usada diretamente nos parâmetros de uma função, facilitando a extração de valores de objetos ou arrays.</p><h4 id="exemplo-2" tabindex="-1"><a class="header-anchor" href="#exemplo-2" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Sem desestruturação</span>
<span class="token keyword">function</span> <span class="token function">imprimeNome</span><span class="token punctuation">(</span><span class="token parameter">pessoa</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">.</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Com desestruturação</span>
<span class="token keyword">function</span> <span class="token function">imprimeNome</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> nome <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pessoa <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">imprimeNome</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Bob</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="desestruturacao-com-valores-padrao" tabindex="-1"><a class="header-anchor" href="#desestruturacao-com-valores-padrao" aria-hidden="true">#</a> <strong>Desestruturação com Valores Padrão:</strong></h3><h4 id="explicacao-3" tabindex="-1"><a class="header-anchor" href="#explicacao-3" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>Valores padrão podem ser definidos para variáveis durante a desestruturação, fornecendo um valor caso a propriedade ou elemento não esteja presente.</p><h4 id="exemplo-3" tabindex="-1"><a class="header-anchor" href="#exemplo-3" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Com valores padrão</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> nome <span class="token operator">=</span> <span class="token string">&#39;Desconhecido&#39;</span><span class="token punctuation">,</span> idade <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token operator">=</span> pessoa<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nome<span class="token punctuation">,</span> idade<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Alice 25 (se a propriedade existir) ou Desconhecido 0 (se não existir)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A desestruturação é uma técnica poderosa que melhora a legibilidade e a concisão do código, especialmente ao lidar com dados complexos em JavaScript. Ela é amplamente utilizada em muitos contextos, como extração de propriedades de objetos e valores de arrays, tornando o código mais expressivo e fácil de entender.</p><h2 id="spread" tabindex="-1"><a class="header-anchor" href="#spread" aria-hidden="true">#</a> Spread</h2><p>O operador de spread (<code>...</code>) em JavaScript é usado para espalhar elementos de arrays ou propriedades de objetos. Ele permite a criação de cópias ou combinações de dados de maneira mais concisa. Vamos explorar a teoria e exemplos de uso do spread em arrays e objetos.</p><h3 id="spread-em-arrays" tabindex="-1"><a class="header-anchor" href="#spread-em-arrays" aria-hidden="true">#</a> <strong>Spread em Arrays:</strong></h3><h4 id="explicacao-4" tabindex="-1"><a class="header-anchor" href="#explicacao-4" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>O spread em arrays é utilizado para espalhar os elementos de um array em outro array, facilitando a cópia ou a combinação de arrays.</p><h4 id="exemplo-4" tabindex="-1"><a class="header-anchor" href="#exemplo-4" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Cópia de arrays</span>
<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> copia <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>original<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Combinação de arrays</span>
<span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> combinado <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>array1<span class="token punctuation">,</span> <span class="token operator">...</span>array2<span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copia<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Saída: [1, 2, 3]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combinado<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Saída: [1, 2, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spread-em-objetos" tabindex="-1"><a class="header-anchor" href="#spread-em-objetos" aria-hidden="true">#</a> <strong>Spread em Objetos:</strong></h3><h4 id="explicacao-5" tabindex="-1"><a class="header-anchor" href="#explicacao-5" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>O spread em objetos é utilizado para espalhar as propriedades de um objeto em outro objeto, tornando a criação de cópias ou combinações de objetos mais eficiente.</p><h4 id="exemplo-5" tabindex="-1"><a class="header-anchor" href="#exemplo-5" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Cópia de objetos</span>
<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> copia <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>original <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Combinação de objetos</span>
<span class="token keyword">const</span> objeto1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> objeto2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> combinado <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>objeto1<span class="token punctuation">,</span> <span class="token operator">...</span>objeto2 <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copia<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Saída: { nome: &#39;Alice&#39;, idade: 25 }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>combinado<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Saída: { nome: &#39;Bob&#39;, idade: 30 }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uso-em-funcoes" tabindex="-1"><a class="header-anchor" href="#uso-em-funcoes" aria-hidden="true">#</a> <strong>Uso em Funções:</strong></h3><h4 id="explicacao-6" tabindex="-1"><a class="header-anchor" href="#explicacao-6" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>O spread pode ser usado para passar dinamicamente os elementos de um array como argumentos para uma função.</p><h4 id="exemplo-6" tabindex="-1"><a class="header-anchor" href="#exemplo-6" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">soma</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> valores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> resultado <span class="token operator">=</span> <span class="token function">soma</span><span class="token punctuation">(</span><span class="token operator">...</span>valores<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultado<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Saída: 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="spread-com-valores-adicionais" tabindex="-1"><a class="header-anchor" href="#spread-com-valores-adicionais" aria-hidden="true">#</a> <strong>Spread com Valores Adicionais:</strong></h3><h4 id="explicacao-7" tabindex="-1"><a class="header-anchor" href="#explicacao-7" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>O spread pode ser usado para criar novos arrays ou objetos com valores adicionais.</p><h4 id="exemplo-7" tabindex="-1"><a class="header-anchor" href="#exemplo-7" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> originalArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>originalArray<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> originalObjeto <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> novoObjeto <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>originalObjeto<span class="token punctuation">,</span> <span class="token literal-property property">cidade</span><span class="token operator">:</span> <span class="token string">&#39;Exemplo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Saída: [1, 2, 3, 4, 5]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>novoObjeto<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: { nome: &#39;Alice&#39;, idade: 25, cidade: &#39;Exemplo&#39; }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rest-parameters" tabindex="-1"><a class="header-anchor" href="#rest-parameters" aria-hidden="true">#</a> <strong>Rest Parameters:</strong></h3><h4 id="explicacao-8" tabindex="-1"><a class="header-anchor" href="#explicacao-8" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>O operador spread também pode ser usado dentro da declaração de uma função para indicar que queremos receber uma quantidade indeterminada de parâmetros.</p><p>Vamos supor que eu queira ter uma função para somar qualquer quantidade de números recebidos por parâmetro.</p><p>Eu posso fazer isso com o operador spread definindo rest parameters, o que significa que minha função vai receber uma quantidade indeterminada de parâmetros, mas vai agrupá-los dentro de um array com o nome que for definido.</p><p>Vemos que, com essa sintaxe, o parâmetro ...números é definido como um array onde são armazenados todos os argumentos enviados que correspondam a essa posição.</p><p>Desta forma, podemos escrever funções que recebam múltiplos parâmetros, sem saber com precisão quantos serão, podendo trabalhá-los posteriormente como um array dentro da função.</p><h4 id="exemplo-8" tabindex="-1"><a class="header-anchor" href="#exemplo-8" aria-hidden="true">#</a> <strong>Exemplo:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">somar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numeros</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numeros<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">somar</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// [ 4, 2 ]</span>
<span class="token function">somar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// [ 10, 15, 30, 5 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exemplo-2-1" tabindex="-1"><a class="header-anchor" href="#exemplo-2-1" aria-hidden="true">#</a> <strong>Exemplo 2:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">somar</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>numeros</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> numeros<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">somar</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">somar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 60</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">somar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 450</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O operador de spread é uma ferramenta poderosa para manipulação de dados em JavaScript, tornando mais fácil e legível a criação de cópias, combinações e manipulação de arrays e objetos. Ele é amplamente utilizado em situações onde é necessário espalhar ou reunir elementos de maneira eficiente.</p>`,113),t=[p];function c(i,r){return s(),a("div",null,t)}const d=n(o,[["render",c],["__file","advOperators.html.vue"]]);export{d as default};
