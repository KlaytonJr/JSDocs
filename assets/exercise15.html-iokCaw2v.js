import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-nb1Fahdj.js";const t={},o=p(`<h2 id="validacao-de-cpf" tabindex="-1"><a class="header-anchor" href="#validacao-de-cpf" aria-hidden="true">#</a> Validação de CPF</h2><p>Crie uma função que valida se um CPF é válido ou não.</p><details><summary>Solução</summary><h3 id="codigo" tabindex="-1"><a class="header-anchor" href="#codigo" aria-hidden="true">#</a> Código</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">validarCPF</span><span class="token punctuation">(</span><span class="token parameter">cpf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Remove caracteres não numéricos</span>
      cpf <span class="token operator">=</span> cpf<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\D</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// Verifica se o CPF tem 11 dígitos</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>cpf<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Verifica se todos os dígitos são iguais</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\d)\\1+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>cpf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Calcula e verifica o primeiro dígito verificador</span>
      <span class="token keyword">let</span> soma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          soma <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>cpf<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">let</span> resto <span class="token operator">=</span> soma <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> digitoVerificador1 <span class="token operator">=</span> resto <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">11</span> <span class="token operator">-</span> resto<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>cpf<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> digitoVerificador1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// Calcula e verifica o segundo dígito verificador</span>
      soma <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          soma <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>cpf<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      resto <span class="token operator">=</span> soma <span class="token operator">%</span> <span class="token number">11</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> digitoVerificador2 <span class="token operator">=</span> resto <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">11</span> <span class="token operator">-</span> resto<span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>cpf<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> digitoVerificador2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Exemplos</span>
  <span class="token keyword">const</span> cpf1 <span class="token operator">=</span> <span class="token string">&#39;123.456.789-09&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">O CPF </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cpf1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> é válido? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">validarCPF</span><span class="token punctuation">(</span>cpf1<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;Sim&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Não&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> cpf2 <span class="token operator">=</span> <span class="token string">&#39;111.222.333-44&#39;</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">O CPF </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cpf2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> é válido? </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">validarCPF</span><span class="token punctuation">(</span>cpf2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;Sim&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Não&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao" aria-hidden="true">#</a> Explicação</h3><p>Nesta implementação, a função validarCPF realiza os seguintes passos:</p><ol><li>Remove caracteres não numéricos do CPF.</li><li>Verifica se o CPF possui 11 dígitos.</li><li>Verifica se todos os dígitos do CPF são iguais, o que seria inválido.</li><li>Calcula e verifica o primeiro dígito verificador.</li><li>Calcula e verifica o segundo dígito verificador.</li></ol><p>Os exemplos demonstram como utilizar a função para validar CPFs específicos. Você pode testar com outros CPFs conforme necessário.</p></details>`,3),e=[o];function c(i,l){return s(),a("div",null,e)}const k=n(t,[["render",c],["__file","exercise15.html.vue"]]);export{k as default};
