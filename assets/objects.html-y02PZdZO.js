import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as e}from"./app-dAsMf_Ww.js";const o={},t=e(`<h1 id="objetos" tabindex="-1"><a class="header-anchor" href="#objetos" aria-hidden="true">#</a> Objetos</h1><p><strong>Objetos em JavaScript: Resumo</strong></p><h3 id="sintaxe-de-objeto" tabindex="-1"><a class="header-anchor" href="#sintaxe-de-objeto" aria-hidden="true">#</a> Sintaxe de Objeto:</h3><ul><li>Em JavaScript, os objetos são coleções de pares chave-valor.</li><li>A sintaxe básica para criar um objeto é usando chaves <code>{}</code>.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pessoa <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;João&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cidade</span><span class="token operator">:</span> <span class="token string">&quot;Exemploville&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="obtencao-e-atribuicao-de-valores" tabindex="-1"><a class="header-anchor" href="#obtencao-e-atribuicao-de-valores" aria-hidden="true">#</a> Obtenção e Atribuição de Valores:</h3><ul><li>Os valores em um objeto são acessados usando a notação de ponto (<code>objeto.propriedade</code>) ou a notação de colchetes (<code>objeto[&#39;propriedade&#39;]</code>).</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">.</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: João</span>
pessoa<span class="token punctuation">.</span>idade <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token comment">// Atribuição de um novo valor à propriedade &quot;idade&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructor-e-new-funcoes-construtoras" tabindex="-1"><a class="header-anchor" href="#constructor-e-new-funcoes-construtoras" aria-hidden="true">#</a> Constructor e <code>new</code> (Funções Construtoras):</h3><ul><li>Construtores são funções especiais usadas para criar objetos com propriedades e métodos específicos.</li><li>O operador <code>new</code> é usado para instanciar objetos a partir de uma função construtora.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Carro</span><span class="token punctuation">(</span><span class="token parameter">modelo<span class="token punctuation">,</span> ano</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>modelo <span class="token operator">=</span> modelo<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ano <span class="token operator">=</span> ano<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> meuCarro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Carro</span><span class="token punctuation">(</span><span class="token string">&quot;Fusca&quot;</span><span class="token punctuation">,</span> <span class="token number">1970</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uso-do-this" tabindex="-1"><a class="header-anchor" href="#uso-do-this" aria-hidden="true">#</a> Uso do <code>this</code>:</h3><ul><li>O <code>this</code> refere-se ao contexto atual de execução e é usado dentro de um objeto ou função construtora para se referir à instância atual.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Pessoa</span><span class="token punctuation">(</span><span class="token parameter">nome<span class="token punctuation">,</span> idade</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">=</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>idade <span class="token operator">=</span> idade<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">apresentar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Olá, meu nome é </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>nome<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> e tenho </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>idade<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> anos.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> pessoa1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pessoa</span><span class="token punctuation">(</span><span class="token string">&quot;Maria&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pessoa1<span class="token punctuation">.</span><span class="token function">apresentar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Olá, meu nome é Maria e tenho 30 anos.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exemplo-completo" tabindex="-1"><a class="header-anchor" href="#exemplo-completo" aria-hidden="true">#</a> Exemplo Completo:</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">nome<span class="token punctuation">,</span> tipo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">=</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>tipo <span class="token operator">=</span> tipo<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">emitirSom</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">O </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>tipo<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>nome<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> faz um som.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> cachorro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&quot;Rex&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachorro&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> gato <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">&quot;Whiskers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gato&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

cachorro<span class="token punctuation">.</span><span class="token function">emitirSom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: O cachorro Rex faz um som.</span>
gato<span class="token punctuation">.</span><span class="token function">emitirSom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: O gato Whiskers faz um som.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Em resumo, objetos em JavaScript são estruturas flexíveis e poderosas que permitem armazenar e organizar dados. A notação de ponto, funções construtoras, e o uso do <code>this</code> são aspectos essenciais ao trabalhar com objetos em JavaScript.</p><h3 id="metodos-para-objetos-personalizados" tabindex="-1"><a class="header-anchor" href="#metodos-para-objetos-personalizados" aria-hidden="true">#</a> Métodos para Objetos Personalizados:</h3><ul><li>Métodos são funções associadas a objetos. Eles podem ser definidos como propriedades em objetos e executar ações específicas quando chamados.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pessoa <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;Ana&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>
    <span class="token function-variable function">saudacao</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Olá, meu nome é </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>nome<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> e tenho </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>idade<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> anos.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

pessoa<span class="token punctuation">.</span><span class="token function">saudacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Olá, meu nome é Ana e tenho 28 anos.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Exemplo 2 (utilizando this):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pessoa</span><span class="token punctuation">(</span><span class="token parameter">nome<span class="token punctuation">,</span> idade<span class="token punctuation">,</span> rua</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">=</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>idade <span class="token operator">=</span> idade<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rua <span class="token operator">=</span> rua<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">falar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;OLÁ, SOU &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nome<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> pessoa1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pessoa</span><span class="token punctuation">(</span><span class="token string">&quot;Homer&quot;</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token string">&quot;Av. Sempre-verde 742&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> pessoa2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pessoa</span><span class="token punctuation">(</span><span class="token string">&quot;Marge&quot;</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token string">&quot;Av. Sempre-verde 742&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

pessoa1<span class="token punctuation">.</span><span class="token function">falar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: OLÁ, SOU Homer</span>
pessoa2<span class="token punctuation">.</span><span class="token function">falar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: OLÁ, SOU Marge</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="funcao-x-metodo" tabindex="-1"><a class="header-anchor" href="#funcao-x-metodo" aria-hidden="true">#</a> Função x Método:</h3><ul><li>Uma função se torna um método quando é associada a um objeto.</li><li>Métodos são funções que pertencem a um objeto específico.</li></ul><p>Exemplo função:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//uma função é um bloco de código escrito para </span>
<span class="token comment">//realizar algum conjunto específico de tarefas</span>
<span class="token keyword">function</span> <span class="token function">somar</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> soma <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> soma<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">somar</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Exemplo método:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//um método é uma propriedade de um objeto </span>
<span class="token comment">//que contém uma definição de função</span>
<span class="token keyword">let</span> pessoa <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;Mariana&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
    <span class="token function-variable function">informacoes</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">+</span> <span class="token string">&quot; tem &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idade <span class="token operator">+</span> <span class="token string">&quot; anos&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">.</span><span class="token function">informacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="propriedades-e-metodos-em-javascript" tabindex="-1"><a class="header-anchor" href="#propriedades-e-metodos-em-javascript" aria-hidden="true">#</a> Propriedades e Métodos em JavaScript:</h3><ul><li>Propriedades são valores associados a um objeto.</li><li>Métodos são funções associadas a um objeto.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> carro <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">modelo</span><span class="token operator">:</span> <span class="token string">&quot;Civic&quot;</span><span class="token punctuation">,</span> <span class="token comment">// propriedade</span>
    <span class="token literal-property property">ano</span><span class="token operator">:</span> <span class="token number">2022</span><span class="token punctuation">,</span> <span class="token comment">// propriedade</span>
    <span class="token function-variable function">ligar</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// método</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;O carro está ligado.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>carro<span class="token punctuation">.</span>modelo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Civic</span>
carro<span class="token punctuation">.</span><span class="token function">ligar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: O carro está ligado.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="string-como-objetos" tabindex="-1"><a class="header-anchor" href="#string-como-objetos" aria-hidden="true">#</a> String como objetos</h4><p>O JavaScript conta com seus próprios objetos, incluindo alguns que já usamos sem identificar que são objetos.</p><p>Por exemplo: Toda vez que criamos uma palavra, ela é criada automaticamente como uma instância do objeto String e, portanto, tem vários métodos/propriedades comuns disponíveis.</p><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> texto <span class="token operator">=</span> <span class="token string">&quot;Olá, Coder&quot;</span><span class="token punctuation">;</span>

<span class="token comment">//Propriedade: Comprimento da texto.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>texto<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Método: Converter para minúscula.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>texto<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Método: Converter para maiúscula.</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>texto<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operador-in" tabindex="-1"><a class="header-anchor" href="#operador-in" aria-hidden="true">#</a> Operador <code>in</code>:</h3><ul><li>O operador <code>in</code> é usado para verificar se uma propriedade específica está presente em um objeto.</li><li>Retorna <code>true</code> se a propriedade existir e <code>false</code> se não existir.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pessoa <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;João&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;nome&quot;</span> <span class="token keyword">in</span> pessoa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;altura&quot;</span> <span class="token keyword">in</span> pessoa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operador-for-in" tabindex="-1"><a class="header-anchor" href="#operador-for-in" aria-hidden="true">#</a> Operador <code>for...in</code>:</h3><ul><li>O <code>for...in</code> é usado para iterar sobre as propriedades enumeráveis de um objeto.</li><li>Itera sobre todas as propriedades próprias e enumeráveis, incluindo as herdadas.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> carro <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">marca</span><span class="token operator">:</span> <span class="token string">&quot;Toyota&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">modelo</span><span class="token operator">:</span> <span class="token string">&quot;Corolla&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">ano</span><span class="token operator">:</span> <span class="token number">2020</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> propriedade <span class="token keyword">in</span> carro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>propriedade <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> carro<span class="token punctuation">[</span>propriedade<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// Saída:</span>
<span class="token comment">// marca: Toyota</span>
<span class="token comment">// modelo: Corolla</span>
<span class="token comment">// ano: 2020</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="desestruturacao-de-objetos" tabindex="-1"><a class="header-anchor" href="#desestruturacao-de-objetos" aria-hidden="true">#</a> Desestruturação de objetos</h3><p>A desestruturação de objetos é uma característica do JavaScript que permite extrair valores de objetos e atribuí-los a variáveis de forma concisa. Aqui está um resumo dos principais conceitos relacionados à desestruturação de objetos:</p><h3 id="sintaxe-basica" tabindex="-1"><a class="header-anchor" href="#sintaxe-basica" aria-hidden="true">#</a> Sintaxe Básica:</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pessoa <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">cidade</span><span class="token operator">:</span> <span class="token string">&#39;Exemplo&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Desestruturação</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> nome<span class="token punctuation">,</span> idade<span class="token punctuation">,</span> cidade <span class="token punctuation">}</span> <span class="token operator">=</span> pessoa<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Saída: &#39;Alice&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idade<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Saída: 25</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cidade<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: &#39;Exemplo&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="atribuicao-com-nomes-diferentes" tabindex="-1"><a class="header-anchor" href="#atribuicao-com-nomes-diferentes" aria-hidden="true">#</a> Atribuição com Nomes Diferentes:</h3><p>É possível atribuir a variáveis com nomes diferentes da propriedade do objeto.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> nomeUsuario<span class="token punctuation">,</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> idadeUsuario <span class="token punctuation">}</span> <span class="token operator">=</span> pessoa<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nomeUsuario<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Saída: &#39;Alice&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>idadeUsuario<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="valor-padrao" tabindex="-1"><a class="header-anchor" href="#valor-padrao" aria-hidden="true">#</a> Valor Padrão:</h3><p>Podemos fornecer valores padrão para propriedades que podem ser undefined no objeto.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> nome<span class="token punctuation">,</span> idade<span class="token punctuation">,</span> cidade <span class="token operator">=</span> <span class="token string">&#39;Desconhecida&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> pessoa<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cidade<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: &#39;Desconhecida&#39; (valor padrão, pois não há &#39;cidade&#39; no objeto)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="desestruturacao-em-parametros-de-funcao" tabindex="-1"><a class="header-anchor" href="#desestruturacao-em-parametros-de-funcao" aria-hidden="true">#</a> Desestruturação em Parâmetros de Função:</h3><p>A desestruturação é frequentemente usada em parâmetros de função.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exibirInformacoes</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> nome<span class="token punctuation">,</span> idade <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Nome: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>nome<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Idade: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>idade<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">exibirInformacoes</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Nome: Alice, Idade: 25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="desestruturacao-aninhada" tabindex="-1"><a class="header-anchor" href="#desestruturacao-aninhada" aria-hidden="true">#</a> Desestruturação Aninhada:</h3><p>Podemos desestruturar objetos aninhados.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> empresa <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;ABC Corp&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">endereco</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">cidade</span><span class="token operator">:</span> <span class="token string">&#39;CidadeA&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">estado</span><span class="token operator">:</span> <span class="token string">&#39;EstadoX&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> nome<span class="token punctuation">,</span> <span class="token literal-property property">endereco</span><span class="token operator">:</span> <span class="token punctuation">{</span> cidade<span class="token punctuation">,</span> estado <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> empresa<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cidade<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: &#39;CidadeA&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>estado<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: &#39;EstadoX&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A desestruturação de objetos oferece uma maneira eficiente de trabalhar com propriedades de objetos, tornando o código mais limpo e legível. É uma técnica comumente usada em JavaScript moderno.</p>`,67),p=[t];function c(i,l){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","objects.html.vue"]]);export{d as default};
