import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,f as e}from"./app-0gBlXB7p.js";const o={},t=e(`<h1 id="storage-e-json" tabindex="-1"><a class="header-anchor" href="#storage-e-json" aria-hidden="true">#</a> Storage e JSON</h1><h2 id="storage" tabindex="-1"><a class="header-anchor" href="#storage" aria-hidden="true">#</a> Storage</h2><p>Os storages do navegador referem-se a mecanismos de armazenamento de dados fornecidos pelos navegadores da web para que os desenvolvedores possam armazenar informações localmente no dispositivo do usuário. Os dois tipos principais de storages são o <code>localStorage</code> e o <code>sessionStorage</code>.</p><h3 id="_1-localstorage" tabindex="-1"><a class="header-anchor" href="#_1-localstorage" aria-hidden="true">#</a> <strong>1. localStorage:</strong></h3><h4 id="explicacao" tabindex="-1"><a class="header-anchor" href="#explicacao" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>O <code>localStorage</code> permite armazenar pares de chave-valor de forma persistente no dispositivo do usuário. Os dados armazenados no <code>localStorage</code> permanecem disponíveis mesmo após o navegador ser fechado e reaberto.</p><h4 id="explicacao-de-chave-valor" tabindex="-1"><a class="header-anchor" href="#explicacao-de-chave-valor" aria-hidden="true">#</a> <strong>Explicação de chave-valor:</strong></h4><p>Em JavaScript, chave-valor refere-se a uma estrutura de dados onde dados são organizados e acessados por meio de uma chave única associada a cada valor correspondente. Cada par chave-valor em um conjunto de dados pode ser identificado exclusivamente pela chave, permitindo a recuperação eficiente do valor associado.</p><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Objeto com estrutura de chave-valor</span>
<span class="token keyword">const</span> aluno <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token literal-property property">curso</span><span class="token operator">:</span> <span class="token string">&#39;Engenharia&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Acessando valores por chaves</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aluno<span class="token punctuation">.</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Saída: Alice</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aluno<span class="token punctuation">.</span>idade<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Saída: 25</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aluno<span class="token punctuation">.</span>curso<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Saída: Engenharia</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nesse exemplo, <code>nome</code>, <code>idade</code> e <code>curso</code> são as chaves, e &#39;Alice&#39;, 25 e &#39;Engenharia&#39; são os valores associados a essas chaves, respectivamente. A utilização de estruturas chave-valor é comum em objetos, mapas e outras implementações em JavaScript para organizar e acessar dados de maneira eficiente.</p><h4 id="uso-com-javascript" tabindex="-1"><a class="header-anchor" href="#uso-com-javascript" aria-hidden="true">#</a> <strong>Uso com JavaScript:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Armazenar dados no localStorage</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;chave&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;valor&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Recuperar dados do localStorage</span>
<span class="token keyword">const</span> valor <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;chave&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Remover item do localStorage</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;chave&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Limpar todos os itens do localStorage</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-sessionstorage" tabindex="-1"><a class="header-anchor" href="#_2-sessionstorage" aria-hidden="true">#</a> <strong>2. sessionStorage:</strong></h3><h4 id="explicacao-1" tabindex="-1"><a class="header-anchor" href="#explicacao-1" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>O <code>sessionStorage</code> funciona de maneira semelhante ao <code>localStorage</code>, mas os dados armazenados nele são válidos apenas durante a sessão do navegador. Os dados são perdidos quando o navegador é fechado.</p><h4 id="uso-com-javascript-1" tabindex="-1"><a class="header-anchor" href="#uso-com-javascript-1" aria-hidden="true">#</a> <strong>Uso com JavaScript:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Armazenar dados no sessionStorage</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;chave&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;valor&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Recuperar dados do sessionStorage</span>
<span class="token keyword">const</span> valor <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;chave&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Remover item do sessionStorage</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;chave&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Limpar todos os itens do sessionStorage</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-cookies" tabindex="-1"><a class="header-anchor" href="#_3-cookies" aria-hidden="true">#</a> <strong>3. Cookies:</strong></h3><h4 id="explicacao-2" tabindex="-1"><a class="header-anchor" href="#explicacao-2" aria-hidden="true">#</a> <strong>Explicação:</strong></h4><p>Os cookies são pequenos arquivos de texto armazenados no dispositivo do usuário. Embora não sejam tecnicamente um storage, são frequentemente usados para armazenar dados temporários.</p><h4 id="uso-com-javascript-2" tabindex="-1"><a class="header-anchor" href="#uso-com-javascript-2" aria-hidden="true">#</a> <strong>Uso com JavaScript:</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Criar um cookie</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;nome=valor; expires=DataDeExpiracao; path=/&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// Recuperar um cookie</span>
<span class="token keyword">const</span> cookie <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>

<span class="token comment">// Excluir um cookie</span>
document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;nome=; expires=DataDeExpiracao; path=/&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-uso-responsavel-e-consideracoes" tabindex="-1"><a class="header-anchor" href="#_4-uso-responsavel-e-consideracoes" aria-hidden="true">#</a> <strong>4. Uso Responsável e Considerações:</strong></h3><ul><li><p><strong>Capacidade de Armazenamento:</strong></p><ul><li>Ambos os storages têm limites de capacidade de armazenamento, geralmente em torno de 5 MB para o <code>localStorage</code>.</li></ul></li><li><p><strong>Segurança:</strong></p><ul><li>Os dados armazenados nos storages são acessíveis apenas para scripts da mesma origem (mesmo protocolo, domínio e porta).</li></ul></li><li><p><strong>Persistência e Segurança:</strong></p><ul><li>Use <code>localStorage</code> para dados persistentes e <code>sessionStorage</code> para dados temporários.</li></ul></li><li><p><strong>Cookies:</strong></p><ul><li>Cookies têm limitações de tamanho e são frequentemente usados para armazenar dados temporários no lado do cliente.</li></ul></li><li><p><strong>APIs de Armazenamento Assíncrono:</strong></p><ul><li>Novas APIs, como <code>IndexedDB</code>, fornecem capacidades de armazenamento mais avançadas e assíncronas.</li></ul></li></ul><p>Os storages do navegador oferecem uma maneira conveniente de armazenar dados localmente no navegador do usuário. A escolha entre <code>localStorage</code>, <code>sessionStorage</code> e cookies depende dos requisitos específicos da aplicação e da necessidade de persistência dos dados.</p><h3 id="_5-percorrendo-os-storages" tabindex="-1"><a class="header-anchor" href="#_5-percorrendo-os-storages" aria-hidden="true">#</a> <strong>5. Percorrendo os storages:</strong></h3><p>É possível obter todos os valores armazenados em localStorage ou sessionStorage com um loop.</p><p>Mas não podemos usar for...of, porque não são objetos iteráveis, nem for...in, porque obtemos outras propriedades do objeto que não são valores armazenados.</p><p>O loop a ser usado é o for com o método key:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//Loop para percorrer as chaves armazenadas no objeto localStorage</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> chave <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Chave: &quot;</span> <span class="token operator">+</span> chave <span class="token operator">+</span> <span class="token string">&quot;   Valor: &quot;</span> <span class="token operator">+</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>chave<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="json" tabindex="-1"><a class="header-anchor" href="#json" aria-hidden="true">#</a> JSON</h2><h3 id="armazenamento-de-objetos-em-string" tabindex="-1"><a class="header-anchor" href="#armazenamento-de-objetos-em-string" aria-hidden="true">#</a> Armazenamento de objetos em string</h3><p>Se quisermos armazenar a informação de um objeto em storage, é preciso considerar que tanto a chave quanto o valor são armazenados em strings.</p><p>Qualquer outro tipo a ser armazenado, como um número ou um objeto, é convertido em cadeia de texto automaticamente.</p><p>Então, ao tentar armazenar um objeto sem uma transformação prévia, armazenamos [object Object], a conversão por default de objeto para string. Para armazenar a informação corretamente, é preciso transformar o objeto em JSON.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> produto1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">produto</span><span class="token operator">:</span> <span class="token string">&quot;Arroz&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;produto1&quot;</span><span class="token punctuation">,</span> produto1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// É armazenado [object Object]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Para evitar esse comportamento, armazenamos os dados de objeto transformadas em uma string JSON.</p><h3 id="_1-o-que-e-json" tabindex="-1"><a class="header-anchor" href="#_1-o-que-e-json" aria-hidden="true">#</a> <strong>1. O que é JSON:</strong></h3><ul><li><strong>Definição:</strong> JSON (JavaScript Object Notation) é um formato leve de troca de dados que é fácil para humanos lerem e escreverem, e fácil para máquinas interpretarem e gerarem.</li></ul><h3 id="_2-sintaxe-basica" tabindex="-1"><a class="header-anchor" href="#_2-sintaxe-basica" aria-hidden="true">#</a> <strong>2. Sintaxe Básica:</strong></h3><ul><li><p><strong>Objetos e Arrays:</strong></p><ul><li>Representação de dados em pares chave-valor.</li><li>Pode conter objetos aninhados e arrays.</li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;nome&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;idade&quot;</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token property">&quot;cursos&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Engenharia&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Informática&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;endereco&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;cidade&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Cidade Exemplo&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;estado&quot;</span><span class="token operator">:</span> <span class="token string">&quot;EX&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-uso-em-javascript" tabindex="-1"><a class="header-anchor" href="#_3-uso-em-javascript" aria-hidden="true">#</a> <strong>3. Uso em JavaScript:</strong></h3><ul><li><p><strong>JSON.parse():</strong></p><ul><li>Converte uma string JSON para um objeto JavaScript.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> jsonString <span class="token operator">=</span> <span class="token string">&#39;{&quot;nome&quot;: &quot;Alice&quot;, &quot;idade&quot;: 25}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> objeto <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>JSON.stringify():</strong></p><ul><li>Converte um objeto JavaScript para uma string JSON.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> objeto <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>objeto<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-propriedades-importantes" tabindex="-1"><a class="header-anchor" href="#_4-propriedades-importantes" aria-hidden="true">#</a> <strong>4. Propriedades Importantes:</strong></h3><ul><li><p><strong>Leve e Legível:</strong></p><ul><li>Formato compacto e fácil de ler para humanos.</li></ul></li><li><p><strong>Suporte a Tipos de Dados Básicos:</strong></p><ul><li>Strings, números, booleanos, objetos, arrays, null.</li></ul></li><li><p><strong>Não Suporta Funções:</strong></p><ul><li>Não é possível incluir funções em JSON.</li></ul></li></ul><h3 id="_5-utilizacao-comum" tabindex="-1"><a class="header-anchor" href="#_5-utilizacao-comum" aria-hidden="true">#</a> <strong>5. Utilização Comum:</strong></h3><ul><li><p><strong>Comunicação entre Servidor e Cliente:</strong></p><ul><li>Amplamente utilizado para enviar dados entre servidores e clientes.</li></ul></li><li><p><strong>Armazenamento de Configurações:</strong></p><ul><li>Configurações e metadados podem ser armazenados em formato JSON.</li></ul></li><li><p><strong>Intercâmbio de Dados:</strong></p><ul><li>Comum em APIs para troca de dados estruturados.</li></ul></li></ul><h3 id="_6-boas-praticas" tabindex="-1"><a class="header-anchor" href="#_6-boas-praticas" aria-hidden="true">#</a> <strong>6. Boas Práticas:</strong></h3><ul><li><p><strong>Validação:</strong></p><ul><li>É recomendável validar strings JSON antes de fazer o parse.</li></ul></li><li><p><strong>Segurança:</strong></p><ul><li>Evitar executar JSON proveniente de fontes não confiáveis.</li></ul></li></ul><h3 id="_7-exemplo-de-manipulacao-em-javascript" tabindex="-1"><a class="header-anchor" href="#_7-exemplo-de-manipulacao-em-javascript" aria-hidden="true">#</a> <strong>7. Exemplo de Manipulação em JavaScript:</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Convertendo objeto para JSON</span>
<span class="token keyword">const</span> objeto <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">idade</span><span class="token operator">:</span> <span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jsonString <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>objeto<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Convertendo JSON para objeto</span>
<span class="token keyword">const</span> objetoDeVolta <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O formato JSON é uma parte integral do ecossistema web, sendo amplamente utilizado para a comunicação entre sistemas, armazenamento de configurações e intercâmbio de dados estruturados em JavaScript e em muitas outras linguagens de programação.</p><h3 id="armazenando-array-de-objetos-exemplo" tabindex="-1"><a class="header-anchor" href="#armazenando-array-de-objetos-exemplo" aria-hidden="true">#</a> Armazenando array de objetos (exemplo):</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> produtos <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">produto</span><span class="token operator">:</span> <span class="token string">&quot;Arroz&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">125</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">produto</span><span class="token operator">:</span> <span class="token string">&quot;Macarrão&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">70</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">produto</span><span class="token operator">:</span> <span class="token string">&quot;Pão&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">produto</span><span class="token operator">:</span> <span class="token string">&quot;Pudim&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">armazenarLocal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chave<span class="token punctuation">,</span> valor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>chave<span class="token punctuation">,</span> valor<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">//Armazenar produto por produto</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> produto <span class="token keyword">of</span> produtos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">armazenarLocal</span><span class="token punctuation">(</span>produto<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>produto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ou armazenar array completo</span>
<span class="token function">armazenarLocal</span><span class="token punctuation">(</span><span class="token string">&quot;listaProdutos&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>produtos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pegar-array-de-objetos-exemplo" tabindex="-1"><a class="header-anchor" href="#pegar-array-de-objetos-exemplo" aria-hidden="true">#</a> Pegar array de objetos (exemplo):</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Produto</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">=</span> obj<span class="token punctuation">.</span>produto<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>preco <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>preco<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">somaICMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>preco <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>preco <span class="token operator">*</span> <span class="token number">1.21</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//Obtemos a lista de produtos armazenados</span>
<span class="token keyword">const</span> armazenados <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;listaProdutos&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> produtos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//Iteramos os armazenados com for...of </span>
<span class="token comment">//para transformar todos seus objetos no tipo produto.</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> objeto <span class="token keyword">of</span> armazenados<span class="token punctuation">)</span>
    produtos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Produto</span><span class="token punctuation">(</span>objeto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//Agora temos o objeto produtos e podemos usar seus métodos</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> produto <span class="token keyword">of</span> produtos<span class="token punctuation">)</span>
    produto<span class="token punctuation">.</span><span class="token function">somaICMS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),p=[t];function c(r,i){return s(),n("div",null,p)}const d=a(o,[["render",c],["__file","storage.html.vue"]]);export{d as default};
