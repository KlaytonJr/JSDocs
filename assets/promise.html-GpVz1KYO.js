import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as e,a as o,f as a}from"./app-0gBlXB7p.js";const t={},i=a(`<h1 id="assincrona-e-promise" tabindex="-1"><a class="header-anchor" href="#assincrona-e-promise" aria-hidden="true">#</a> Assincrona e Promise</h1><h2 id="assincronas-em-javascript" tabindex="-1"><a class="header-anchor" href="#assincronas-em-javascript" aria-hidden="true">#</a> <strong>Assíncronas em JavaScript:</strong></h2><ul><li><p><strong>Definição:</strong></p><ul><li>Operações assíncronas permitem que o programa continue a executar outras tarefas enquanto aguarda a conclusão de operações demoradas, como requisições de rede ou leitura de arquivos.</li></ul></li><li><p><strong>Mecanismos de Assincronicidade:</strong></p><ul><li>Callbacks, Promises e Async/Await são mecanismos comuns para lidar com operações assíncronas.</li></ul></li></ul><h2 id="promises" tabindex="-1"><a class="header-anchor" href="#promises" aria-hidden="true">#</a> <strong>Promises:</strong></h2><ul><li><p><strong>Definição:</strong></p><ul><li>Promises são objetos que representam a conclusão ou falha eventual de uma operação assíncrona. Elas fornecem uma maneira mais estruturada de lidar com o código assíncrono.</li></ul></li><li><p><strong>Estados:</strong></p><ul><li><strong>Pendente:</strong> Estado inicial, a operação ainda não foi concluída.</li><li><strong>Resolvida (Fulfilled):</strong> A operação foi concluída com sucesso.</li><li><strong>Rejeitada (Rejected):</strong> A operação falhou.</li></ul></li><li><p><strong>Métodos Principais:</strong></p><ul><li><code>then()</code>: Tratamento bem-sucedido.</li><li><code>catch()</code>: Tratamento de falhas.</li><li><code>finally()</code>: Executa sempre, independentemente do resultado.</li></ul></li><li><p><strong>Exemplo de Promise:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> minhaPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Simula uma operação assíncrona</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sucesso <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sucesso<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;Operação concluída com sucesso!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">&#39;Erro na operação!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

minhaPromise
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resultado</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultado<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">erro</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>erro<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Sempre executado.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>As Promises e a assincronicidade são fundamentais para lidar com operações demoradas de forma eficiente em JavaScript, garantindo uma execução suave e responsiva do código.</p><h2 id="settimeout-e-cleartimeout" tabindex="-1"><a class="header-anchor" href="#settimeout-e-cleartimeout" aria-hidden="true">#</a> <strong><code>setTimeout</code> e <code>clearTimeout</code></strong></h2><h3 id="settimeout" tabindex="-1"><a class="header-anchor" href="#settimeout" aria-hidden="true">#</a> <strong><code>setTimeout</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>A função <code>setTimeout</code> é utilizada para agendar a execução de uma função ou código após um determinado intervalo de tempo, especificado em milissegundos.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>funcao<span class="token punctuation">,</span> tempoDeEspera<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exibirMensagem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Executado após 2000ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>exibirMensagem<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="cleartimeout" tabindex="-1"><a class="header-anchor" href="#cleartimeout" aria-hidden="true">#</a> <strong><code>clearTimeout</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>A função <code>clearTimeout</code> é utilizada para cancelar a execução de uma função agendada com <code>setTimeout</code>, impedindo que ela ocorra.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exibirMensagem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Executado após 2000ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>exibirMensagem<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Cancela a execução agendada</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="funcionamento" tabindex="-1"><a class="header-anchor" href="#funcionamento" aria-hidden="true">#</a> <strong>Funcionamento:</strong></h3><ol><li><p><strong><code>setTimeout</code>:</strong></p><ul><li>Aguarda o tempo especificado (<code>tempoDeEspera</code>) e, em seguida, executa a função fornecida (<code>funcao</code>).</li></ul></li><li><p><strong><code>clearTimeout</code>:</strong></p><ul><li>Utiliza o identificador de timeout (<code>timeoutId</code>) para cancelar a execução agendada antes que ela ocorra.</li></ul></li></ol><h3 id="uso-comum" tabindex="-1"><a class="header-anchor" href="#uso-comum" aria-hidden="true">#</a> <strong>Uso Comum:</strong></h3><ul><li><p><strong>Atrasos Assíncronos:</strong></p><ul><li>Útil para criar atrasos em operações assíncronas ou para agendar tarefas após um intervalo específico.</li></ul></li><li><p><strong>Feedback ao Usuário:</strong></p><ul><li>Pode ser usado para exibir mensagens temporárias ou notificações em interfaces de usuário.</li></ul></li></ul><h3 id="consideracoes-importantes" tabindex="-1"><a class="header-anchor" href="#consideracoes-importantes" aria-hidden="true">#</a> <strong>Considerações Importantes:</strong></h3><ul><li><p><strong>Identificador Único:</strong></p><ul><li>O identificador retornado por <code>setTimeout</code> é único e é utilizado por <code>clearTimeout</code> para cancelar o timeout específico.</li></ul></li><li><p><strong>Atraso Mínimo:</strong></p><ul><li>O tempo de espera em <code>setTimeout</code> não é garantido; a execução ocorre após, no mínimo, o tempo especificado.</li></ul></li><li><p><strong>Uso Responsável:</strong></p><ul><li>Deve-se ter cuidado ao utilizar <code>setTimeout</code> para evitar ações indesejadas ou vazamentos de memória.</li></ul></li></ul><p>O <code>setTimeout</code> e o <code>clearTimeout</code> são ferramentas úteis para lidar com a execução de código em intervalos específicos ou para criar atrasos na execução de funções. Eles são frequentemente utilizados em cenários em que é necessário agendar tarefas para ocorrerem após um intervalo de tempo específico.</p>`,18),c=a(`<h2 id="comparacao-entre-sincrono-e-assincrono-em-javascript" tabindex="-1"><a class="header-anchor" href="#comparacao-entre-sincrono-e-assincrono-em-javascript" aria-hidden="true">#</a> <strong>Comparação entre Síncrono e Assíncrono em JavaScript:</strong></h2><h3 id="sincrono" tabindex="-1"><a class="header-anchor" href="#sincrono" aria-hidden="true">#</a> <strong>Síncrono:</strong></h3><ol><li><p><strong>Execução Bloqueante:</strong></p><ul><li>As operações são realizadas uma após a outra, bloqueando a execução até a conclusão de cada tarefa.</li></ul></li><li><p><strong>Fluxo de Controle Linear:</strong></p><ul><li>O código é executado de maneira sequencial, seguindo uma ordem específica.</li></ul></li><li><p><strong>Possível Espera Ativa:</strong></p><ul><li>Pode resultar em espera ativa, onde o programa aguarda a conclusão de uma tarefa antes de iniciar outra.</li></ul></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Início&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Fim&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Saída:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Início
0
1
2
Fim
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="assincrono" tabindex="-1"><a class="header-anchor" href="#assincrono" aria-hidden="true">#</a> <strong>Assíncrono:</strong></h3><ol><li><p><strong>Execução Não-Bloqueante:</strong></p><ul><li>Permite que operações sejam realizadas em paralelo, sem bloquear a execução do restante do código.</li></ul></li><li><p><strong>Callbacks, Promises, Async/Await:</strong></p><ul><li>Mecanismos como callbacks, promises e async/await são utilizados para lidar com operações assíncronas.</li></ul></li><li><p><strong>Melhor Desempenho em Operações Demoradas:</strong></p><ul><li>Útil para operações que levam tempo, como requisições de rede, leitura de arquivos, etc.</li></ul></li><li><p><strong>Exemplo com Callback:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Início&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tarefa Assíncrona Concluída&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Fim&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Saída:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Início
Fim
Tarefa Assíncrona Concluída
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="consideracoes-gerais" tabindex="-1"><a class="header-anchor" href="#consideracoes-gerais" aria-hidden="true">#</a> <strong>Considerações Gerais:</strong></h3><ul><li><p><strong>Síncrono:</strong></p><ul><li>Simplicidade no fluxo de controle.</li><li>Bloqueio durante operações demoradas.</li></ul></li><li><p><strong>Assíncrono:</strong></p><ul><li>Melhor desempenho em operações demoradas.</li><li>Complexidade adicional de gerenciamento de assincronicidade.</li></ul></li></ul><p>A escolha entre abordagens síncronas e assíncronas depende das necessidades específicas da aplicação. Operações rápidas e sequenciais podem se beneficiar da simplicidade síncrona, enquanto operações demoradas e paralelas podem ser mais eficientemente tratadas de forma assíncrona para evitar bloqueios desnecessários. O JavaScript oferece uma variedade de mecanismos para lidar com ambos os casos.</p><h2 id="call-stack-pilha-de-chamadas" tabindex="-1"><a class="header-anchor" href="#call-stack-pilha-de-chamadas" aria-hidden="true">#</a> <strong>Call Stack (Pilha de Chamadas)</strong></h2><p>A call stack, ou pilha de chamadas, é uma estrutura de dados em JavaScript que gerencia a execução de funções. Ela segue o princípio Last In, First Out (LIFO), onde a última função adicionada à pilha é a primeira a ser removida. A call stack mantém o controle do contexto de execução durante a execução de um programa.</p><h3 id="funcionamento-1" tabindex="-1"><a class="header-anchor" href="#funcionamento-1" aria-hidden="true">#</a> <strong>Funcionamento:</strong></h3><ol><li><p><strong>Chamada de Função:</strong></p><ul><li>Quando uma função é chamada, um novo frame (quadro) é criado e colocado no topo da pilha, representando a execução dessa função.</li></ul></li><li><p><strong>Execução:</strong></p><ul><li>O código da função é executado dentro do contexto desse frame.</li></ul></li><li><p><strong>Retorno da Função:</strong></p><ul><li>Quando a função é concluída, seu frame é removido da pilha, retornando o controle para a função chamadora.</li></ul></li><li><p><strong>LIFO (Last In, First Out):</strong></p><ul><li>A pilha opera seguindo a lógica LIFO, onde a última função adicionada é a primeira a ser removida.</li></ul></li></ol><h3 id="exemplo-simples" tabindex="-1"><a class="header-anchor" href="#exemplo-simples" aria-hidden="true">#</a> <strong>Exemplo Simples:</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">funcaoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Função A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">funcaoB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">funcaoA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Função B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">funcaoB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Pilha de Chamadas:</strong></p><ol><li><code>funcaoB</code> é chamada, adicionando seu frame à pilha.</li><li><code>funcaoA</code> é chamada de dentro de <code>funcaoB</code>, adicionando seu frame à pilha.</li><li><code>funcaoA</code> conclui sua execução, removendo seu frame da pilha.</li><li><code>funcaoB</code> continua a execução após a chamada de <code>funcaoA</code> e conclui, removendo seu frame da pilha.</li></ol><h3 id="uso-na-deteccao-de-erros" tabindex="-1"><a class="header-anchor" href="#uso-na-deteccao-de-erros" aria-hidden="true">#</a> <strong>Uso na Detecção de Erros:</strong></h3><ul><li>A call stack é fundamental para a detecção de erros e rastreamento de pilhas de chamadas em mensagens de erro, auxiliando na identificação de onde ocorreu um problema.</li></ul><h3 id="consideracoes-importantes-1" tabindex="-1"><a class="header-anchor" href="#consideracoes-importantes-1" aria-hidden="true">#</a> <strong>Considerações Importantes:</strong></h3><ul><li>A pilha pode ficar cheia em casos de recursão excessiva ou loops infinitos, resultando em um erro de estouro de pilha (stack overflow).</li><li>Operações assíncronas, como callbacks e promessas, são tratadas através da Web API e da fila de eventos, não diretamente na pilha de chamadas.</li></ul><p>A call stack desempenha um papel crucial no gerenciamento do fluxo de execução em JavaScript, rastreando as chamadas de funções e garantindo que o código seja executado de maneira organizada e controlada.</p><h2 id="event-loop" tabindex="-1"><a class="header-anchor" href="#event-loop" aria-hidden="true">#</a> <strong>Event Loop</strong></h2><p>O Event Loop (Laço de Eventos) é um mecanismo essencial em linguagens de programação assíncronas, como JavaScript. Ele gerencia a execução de código, garantindo a não bloqueação do thread principal e permitindo a resposta a eventos assíncronos, como requisições de rede, operações de leitura/escrita e eventos do usuário.</p><h3 id="funcionamento-basico" tabindex="-1"><a class="header-anchor" href="#funcionamento-basico" aria-hidden="true">#</a> <strong>Funcionamento Básico:</strong></h3><ol><li><p><strong>Call Stack (Pilha de Chamadas):</strong></p><ul><li>O código JavaScript é executado na call stack, uma estrutura de dados que mantém o contexto de execução das funções.</li></ul></li><li><p><strong>Eventos e Callbacks:</strong></p><ul><li>Quando ocorrem eventos assíncronos (como cliques do mouse, requisições de rede ou temporizadores), os callbacks correspondentes são colocados em filas de eventos.</li></ul></li><li><p><strong>Callback Queue (Fila de Callbacks):</strong></p><ul><li>Os callbacks aguardam na fila de eventos até que a call stack esteja vazia.</li></ul></li><li><p><strong>Verificação do Event Loop:</strong></p><ul><li>O Event Loop verifica continuamente se a call stack está vazia. Se estiver vazia, ele pega o próximo callback da fila de eventos e o coloca na call stack para execução.</li></ul></li><li><p><strong>Execução do Callback:</strong></p><ul><li>O callback é executado, e o processo se repete.</li></ul></li></ol><h3 id="exemplo-simples-1" tabindex="-1"><a class="header-anchor" href="#exemplo-simples-1" aria-hidden="true">#</a> <strong>Exemplo Simples:</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Início&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Temporizador Executado&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Fim&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Saída Esperada:</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Início
Fim
Temporizador Executado
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uso-em-operacoes-assincronas" tabindex="-1"><a class="header-anchor" href="#uso-em-operacoes-assincronas" aria-hidden="true">#</a> <strong>Uso em Operações Assíncronas:</strong></h3><ul><li><p><strong>Requisições de Rede:</strong></p><ul><li>O Event Loop permite que o código continue executando enquanto aguarda a resposta de uma requisição de rede.</li></ul></li><li><p><strong>Temporizadores:</strong></p><ul><li>Operações como <code>setTimeout</code> são gerenciadas pelo Event Loop, permitindo que outras tarefas sejam executadas durante a contagem regressiva.</li></ul></li></ul><h3 id="consideracoes-importantes-2" tabindex="-1"><a class="header-anchor" href="#consideracoes-importantes-2" aria-hidden="true">#</a> <strong>Considerações Importantes:</strong></h3><ul><li><p><strong>Single Thread:</strong></p><ul><li>JavaScript é uma linguagem single-threaded, o que significa que tem apenas um thread de execução principal.</li></ul></li><li><p><strong>Não Bloqueante:</strong></p><ul><li>O Event Loop torna o JavaScript não bloqueante, permitindo que operações assíncronas sejam tratadas sem interromper a execução do código.</li></ul></li><li><p><strong>Microtasks:</strong></p><ul><li>Microtasks, como Promises, têm prioridade sobre macrotasks (callbacks de temporizadores, eventos do usuário) na fila de eventos.</li></ul></li></ul><p>O Event Loop é crucial para o funcionamento assíncrono eficiente do JavaScript, permitindo a execução de código assíncrono sem bloquear o thread principal. Ele desempenha um papel vital no gerenciamento de eventos e na manutenção da responsividade em aplicações web e outras operações assíncronas.</p><h2 id="setinterval-e-clearinterval" tabindex="-1"><a class="header-anchor" href="#setinterval-e-clearinterval" aria-hidden="true">#</a> <strong><code>setInterval</code> e <code>clearInterval</code></strong></h2><h3 id="setinterval" tabindex="-1"><a class="header-anchor" href="#setinterval" aria-hidden="true">#</a> <strong><code>setInterval</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>A função <code>setInterval</code> é utilizada para repetir a execução de uma função ou código em intervalos regulares, especificados em milissegundos.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>funcao<span class="token punctuation">,</span> intervalo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exibirMensagem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Executado a cada 1000ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>exibirMensagem<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="clearinterval" tabindex="-1"><a class="header-anchor" href="#clearinterval" aria-hidden="true">#</a> <strong><code>clearInterval</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>A função <code>clearInterval</code> é usada para interromper a execução de um intervalo configurado com <code>setInterval</code>.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exibirMensagem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Executado a cada 1000ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>exibirMensagem<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Após 5000ms, interrompe o intervalo</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Intervalo interrompido após 5000ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="funcionamento-2" tabindex="-1"><a class="header-anchor" href="#funcionamento-2" aria-hidden="true">#</a> <strong>Funcionamento:</strong></h3><ol><li><p><strong><code>setInterval</code>:</strong></p><ul><li>Inicia a execução da função em intervalos regulares, criando um identificador de intervalo (<code>intervalId</code>).</li></ul></li><li><p><strong><code>clearInterval</code>:</strong></p><ul><li>Utiliza o identificador do intervalo para interromper a execução repetitiva configurada com <code>setInterval</code>.</li></ul></li></ol><h3 id="uso-comum-1" tabindex="-1"><a class="header-anchor" href="#uso-comum-1" aria-hidden="true">#</a> <strong>Uso Comum:</strong></h3><ul><li><p><strong>Animações:</strong></p><ul><li>Pode ser utilizado para criar animações com atualizações regulares.</li></ul></li><li><p><strong>Atualizações Periódicas:</strong></p><ul><li>Útil para atualizar dados ou conteúdo em intervalos específicos.</li></ul></li></ul><h3 id="consideracoes-importantes-3" tabindex="-1"><a class="header-anchor" href="#consideracoes-importantes-3" aria-hidden="true">#</a> <strong>Considerações Importantes:</strong></h3><ul><li><p><strong>Atraso Inicial:</strong></p><ul><li>O intervalo definido em <code>setInterval</code> é o tempo entre as execuções sucessivas, mas a primeira execução ocorre imediatamente.</li></ul></li><li><p><strong>Identificador Único:</strong></p><ul><li>O identificador retornado por <code>setInterval</code> é único e é utilizado pelo <code>clearInterval</code> para interromper o intervalo específico.</li></ul></li><li><p><strong>Uso Responsável:</strong></p><ul><li>Deve-se ter cuidado ao utilizar <code>setInterval</code> para evitar vazamentos de memória e garantir a eficiência do código.</li></ul></li></ul><p>O <code>setInterval</code> e o <code>clearInterval</code> são mecanismos úteis para a execução repetitiva de código em intervalos específicos. Eles são comumente utilizados em situações em que é necessário realizar ações de forma periódica, como animações ou atualizações automáticas.</p><h2 id="then-catch-e-finally-em-promises" tabindex="-1"><a class="header-anchor" href="#then-catch-e-finally-em-promises" aria-hidden="true">#</a> <strong><code>then</code>, <code>catch</code>, e <code>finally</code> em Promises</strong></h2><h3 id="then" tabindex="-1"><a class="header-anchor" href="#then" aria-hidden="true">#</a> <strong><code>then</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>O método <code>then</code> é usado em Promises para lidar com o resultado bem-sucedido de uma operação assíncrona.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>minhaPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token comment">// Função de sucesso (resolve)</span>
  <span class="token parameter">resultado</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código a ser executado em caso de sucesso</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Uso:</strong></p><ul><li>A função passada para <code>then</code> é executada quando a Promise é resolvida com sucesso, recebendo o resultado como argumento.</li></ul></li></ul><h3 id="catch" tabindex="-1"><a class="header-anchor" href="#catch" aria-hidden="true">#</a> <strong><code>catch</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>O método <code>catch</code> é utilizado para lidar com erros (rejeições) em Promises.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>minhaPromise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>
  <span class="token comment">// Função de erro (reject)</span>
  <span class="token parameter">erro</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código a ser executado em caso de erro</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Uso:</strong></p><ul><li>A função passada para <code>catch</code> é executada quando a Promise é rejeitada, recebendo o motivo do erro como argumento.</li></ul></li></ul><h3 id="finally" tabindex="-1"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> <strong><code>finally</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>O método <code>finally</code> é usado para executar código independentemente de a Promise ser resolvida ou rejeitada.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>minhaPromise<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// Código a ser executado sempre, seja resolvida ou rejeitada</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Uso:</strong></p><ul><li>A função passada para <code>finally</code> será sempre executada, independentemente de a Promise ser resolvida ou rejeitada.</li></ul></li></ul><h3 id="encadeamento-de-then-e-catch" tabindex="-1"><a class="header-anchor" href="#encadeamento-de-then-e-catch" aria-hidden="true">#</a> <strong>Encadeamento de <code>then</code> e <code>catch</code>:</strong></h3><ul><li><p><strong>Encadeamento:</strong></p><ul><li>É comum encadear vários <code>then</code> para lidar com resultados sucessivos e usar <code>catch</code> no final para lidar com qualquer erro que ocorra em qualquer ponto da cadeia.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>minhaPromise
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resultado1</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código para resultado1</span>
    <span class="token keyword">return</span> resultado2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resultado2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código para resultado2</span>
    <span class="token keyword">return</span> resultado3<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resultado3</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código para resultado3</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">erro</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Código para tratar erros em qualquer ponto da cadeia</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="uso-tipico" tabindex="-1"><a class="header-anchor" href="#uso-tipico" aria-hidden="true">#</a> <strong>Uso Típico:</strong></h3><ul><li><strong>Operações Assíncronas:</strong><ul><li><code>then</code> é usado para tratar o sucesso de uma operação assíncrona.</li><li><code>catch</code> é utilizado para lidar com erros durante a execução da operação.</li><li><code>finally</code> é empregado para executar código que deve ser realizado independentemente do resultado da Promise.</li></ul></li></ul><h3 id="consideracoes-importantes-4" tabindex="-1"><a class="header-anchor" href="#consideracoes-importantes-4" aria-hidden="true">#</a> <strong>Considerações Importantes:</strong></h3><ul><li><strong>Ordem de Execução:</strong><ul><li>As funções passadas para <code>then</code>, <code>catch</code> e <code>finally</code> são enfileiradas para execução após</li></ul></li></ul><p>a conclusão da Promise correspondente.</p><ul><li><p><strong>Encadeamento Assíncrono:</strong></p><ul><li>O encadeamento de <code>then</code> permite criar sequências assíncronas, garantindo que cada parte do código aguarde a resolução anterior.</li></ul></li><li><p><strong>Propagação de Erros:</strong></p><ul><li>Erros não tratados em qualquer ponto do encadeamento serão capturados pelo primeiro bloco <code>catch</code> encontrado na cadeia.</li></ul></li><li><p><strong><code>finally</code> e Encadeamento:</strong></p><ul><li>O bloco <code>finally</code> pode ser usado no final do encadeamento para realizar ações independentemente do sucesso ou falha, evitando repetições de código.</li></ul></li></ul><p>Os métodos <code>then</code>, <code>catch</code>, e <code>finally</code> são fundamentais no trabalho com Promises em JavaScript, proporcionando controle eficiente sobre o fluxo de execução assíncrona e permitindo o tratamento adequado de resultados bem-sucedidos, erros e ações que devem ser realizadas independentemente do resultado da Promise.</p><h2 id="try-e-catch" tabindex="-1"><a class="header-anchor" href="#try-e-catch" aria-hidden="true">#</a> <strong><code>try</code> e <code>catch</code></strong></h2><h3 id="try" tabindex="-1"><a class="header-anchor" href="#try" aria-hidden="true">#</a> <strong><code>try</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>O bloco <code>try</code> é usado para envolver uma seção de código onde exceções (erros) podem ocorrer.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// Código onde exceções podem ocorrer</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>erro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Bloco executado em caso de exceção</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Uso:</strong></p><ul><li>O código dentro do bloco <code>try</code> é monitorado quanto a erros. Se ocorrer algum erro, a execução é interrompida, e o controle passa para o bloco <code>catch</code>.</li></ul></li></ul><h3 id="catch-1" tabindex="-1"><a class="header-anchor" href="#catch-1" aria-hidden="true">#</a> <strong><code>catch</code>:</strong></h3><ul><li><p><strong>Definição:</strong></p><ul><li>O bloco <code>catch</code> é utilizado para lidar com exceções (erros) que podem ocorrer dentro do bloco <code>try</code>.</li></ul></li><li><p><strong>Sintaxe:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// Código onde exceções podem ocorrer</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>erro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Bloco executado em caso de exceção</span>
  <span class="token comment">// &#39;erro&#39; contém informações sobre a exceção</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Uso:</strong></p><ul><li>O código dentro do bloco <code>catch</code> é executado se ocorrer uma exceção no bloco <code>try</code>. O parâmetro <code>erro</code> contém informações sobre a exceção.</li></ul></li></ul><h3 id="exemplo" tabindex="-1"><a class="header-anchor" href="#exemplo" aria-hidden="true">#</a> <strong>Exemplo:</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// Código potencialmente problemático</span>
  <span class="token keyword">const</span> resultado <span class="token operator">=</span> <span class="token function">dividir</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Resultado:&#39;</span><span class="token punctuation">,</span> resultado<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>erro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Tratamento de exceção</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Erro:&#39;</span><span class="token punctuation">,</span> erro<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">dividir</span><span class="token punctuation">(</span><span class="token parameter">dividendo<span class="token punctuation">,</span> divisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Divisão por zero não permitida&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> dividendo <span class="token operator">/</span> divisor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uso-tipico-1" tabindex="-1"><a class="header-anchor" href="#uso-tipico-1" aria-hidden="true">#</a> <strong>Uso Típico:</strong></h3><ul><li><p><strong>Tratamento de Exceções:</strong></p><ul><li>Utilizado para encapsular código onde podem ocorrer exceções e fornecer um mecanismo de tratamento para lidar com essas exceções.</li></ul></li><li><p><strong>Evitar Interrupção:</strong></p><ul><li>Ajuda a evitar que um erro em uma parte do código interrompa a execução global do programa.</li></ul></li></ul><h3 id="consideracoes-importantes-5" tabindex="-1"><a class="header-anchor" href="#consideracoes-importantes-5" aria-hidden="true">#</a> <strong>Considerações Importantes:</strong></h3><ul><li><p><strong>Lançamento de Exceções:</strong></p><ul><li>O operador <code>throw</code> é utilizado para lançar exceções dentro do bloco <code>try</code>, e o controle é transferido para o bloco <code>catch</code>.</li></ul></li><li><p><strong>Múltiplos Blocos <code>catch</code>:</strong></p><ul><li>É possível ter vários blocos <code>catch</code> para tratar diferentes tipos de exceções.</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// Código problemático</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>erro1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Tratamento para erro1</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>erro2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Tratamento para erro2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Bloco <code>finally</code>:</strong><ul><li>Pode ser utilizado em conjunto com <code>try</code> e <code>catch</code> para definir código que será executado independentemente de ocorrerem ou não exceções.</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token comment">// Código problemático</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>erro<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Tratamento de exceção</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
  <span class="token comment">// Código a ser executado sempre</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Os blocos <code>try</code> e <code>catch</code> são fundamentais para o tratamento de exceções em JavaScript, proporcionando uma maneira estruturada de lidar com situações inesperadas e manter o controle sobre o fluxo de execução mesmo quando ocorrem erros.</p>`,77);function p(l,r){return s(),e("div",null,[i,o(` ## **setTimeout**

O \`setTimeout\` é uma função em JavaScript que permite agendar a execução de uma função ou a avaliação de uma expressão após um determinado intervalo de tempo. Essa função é comumente utilizada para criar atrasos ou para agendar a execução de código em um momento futuro.

### **Sintaxe:**

\`\`\`javascript
setTimeout(funcaoOuExpressao, tempoDeEspera);
\`\`\`

- \`funcaoOuExpressao\`: A função ou expressão a ser executada após o intervalo de tempo.
- \`tempoDeEspera\`: O tempo em milissegundos que deve decorrer antes da execução da função.

### **Exemplo Básico:**

\`\`\`javascript
console.log('Início');

setTimeout(() => {
  console.log('Executado após 2000ms');
}, 2000);

console.log('Fim');
\`\`\`

**Saída Esperada:**
\`\`\`
Início
Fim
Executado após 2000ms
\`\`\`

### **Funcionamento:**

1. A função \`setTimeout\` é chamada, passando a função a ser executada e o tempo de espera.
2. O código subsequente continua a ser executado sem esperar pela conclusão da operação agendada.
3. Após o intervalo de tempo especificado, a função fornecida é adicionada à fila de tarefas do navegador e será executada assim que possível.

### **Utilizações Comuns:**

1. **Atrasos em Operações Assíncronas:**
   - Útil para introduzir atrasos em operações assíncronas ou para agendar a execução de código após a conclusão de alguma tarefa.

   \`\`\`javascript
   fetch('https://api.example.com/data')
     .then(response => response.json())
     .then(data => {
       setTimeout(() => {
         console.log('Dados processados após 2000ms:', data);
       }, 2000);
     });
   \`\`\`

2. **Animações Simples:**
   - Pode ser usado para criar animações simples introduzindo pequenos atrasos entre as atualizações de propriedades CSS.

   \`\`\`javascript
   const elemento = document.getElementById('animado');
   setTimeout(() => {
     elemento.style.opacity = '1';
   }, 1000);
   \`\`\`

### **Considerações Importantes:**

- O tempo de espera especificado não é garantido; a execução da função ocorre após, no mínimo, o tempo de espera especificado.
- É possível cancelar o agendamento de uma função usando \`clearTimeout\`.
- Para ações periódicas, \`setInterval\` pode ser utilizado.

O \`setTimeout\` é uma ferramenta útil para lidar com a temporização de operações em JavaScript, proporcionando flexibilidade na execução de código assíncrono após um intervalo de tempo específico. `),c])}const m=n(t,[["render",p],["__file","promise.html.vue"]]);export{m as default};
