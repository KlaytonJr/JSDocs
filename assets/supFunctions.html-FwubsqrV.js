import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as a,f as p}from"./app-dAsMf_Ww.js";const o={},e=p(`<h1 id="funcoes-de-ordem-superior" tabindex="-1"><a class="header-anchor" href="#funcoes-de-ordem-superior" aria-hidden="true">#</a> Funções de ordem superior</h1><h2 id="abstracao" tabindex="-1"><a class="header-anchor" href="#abstracao" aria-hidden="true">#</a> Abstração</h2><p>Para iniciarmos vou trazer um conceito muito importante de <strong>abstração</strong>.</p><p>Suponhamos que temos o seguinte código:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    total <span class="token operator">+=</span> i
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>  <span class="token comment">//  55</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos colocar esse código em uma função resultando no seguinte trecho de código:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">somarConjunto</span><span class="token punctuation">(</span><span class="token parameter">inicio<span class="token punctuation">,</span> fim</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> inicio<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> fim<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> i
    <span class="token punctuation">}</span>
    
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>  <span class="token comment">//  55</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Abstraindo o código para uma função, o uso dela fica muito mais simples, precisando chamar uma única linha para referir-se ao código. Como mostrado no exemplo abaixo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">somarConjunto</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  55</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Resumimos um grupo complexo de instruções em uma palavra-chave (função) que especifica qual é a ação executada por ela.</p><p>As abstrações ocultam detalhes sobre a operação a ser resolvida e nos permitem “falar” sobre os problemas em um nível mais alto (ou com um maior grau de abstração).</p><p>Como desenvolvedores(as), estamos constantemente criando funções e abstrações para podermos pensar em um nível mais alto e construir soluções complexas para os problemas que encontramos.</p><p>No JS, existem muitos métodos nativos incorporados que, assim como as abstrações, nos oferecem soluções para problemas recorrentes; além de podermos declarar nossos próprios métodos.</p><h2 id="definicao" tabindex="-1"><a class="header-anchor" href="#definicao" aria-hidden="true">#</a> Definição</h2><p>Funções de ordem superior (em inglês Higher order functions) são aquelas que retornam ou recebem uma função por parâmetro.</p><p>Esse tipo de função nos permite abstrair não só valores, mas também ações.</p><h2 id="retorno-de-funcoes" tabindex="-1"><a class="header-anchor" href="#retorno-de-funcoes" aria-hidden="true">#</a> Retorno de funções</h2><p>Podemos ter uma função que retorna outra função, o que nos permitiria criar funções com um esquema superior.</p><ul><li>Exemplo 1:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">maiorQue</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> m <span class="token operator">&gt;</span> n
<span class="token punctuation">}</span>

<span class="token keyword">let</span> maiorQueDez <span class="token operator">=</span> <span class="token function">maiorQue</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token comment">// let maiorQueDez = (m) =&gt; m &gt; 10</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">maiorQueDez</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//  true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">maiorQueDez</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//  false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-&gt; Quando fazemos o seguinte código, podemos perceber que a função <code>maiorQue</code> vai ser encarregada de retornar uma função que compara se o número recebido como parâmetro é maior do que o passado como paramêtro para ela.</p><ul><li>Exemplo 2:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">atribuirOperacao</span><span class="token punctuation">(</span><span class="token parameter">op</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">&quot;somar&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token string">&quot;subtrair&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> soma <span class="token operator">=</span> <span class="token function">atribuirOperacao</span><span class="token punctuation">(</span><span class="token string">&quot;somar&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> subtracao <span class="token operator">=</span> <span class="token function">atribuirOperacao</span><span class="token punctuation">(</span><span class="token string">&quot;subtrair&quot;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">soma</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//  10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">subtracao</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//  2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-&gt; Nesse exemplo, podemos ver que a função inicial vai receber uma string com a operação no início e retornar uma função referente a operação.</p><h2 id="retronando-funcoes-por-parametros" tabindex="-1"><a class="header-anchor" href="#retronando-funcoes-por-parametros" aria-hidden="true">#</a> Retronando funções por parâmetros</h2><p>Significa escrever funções que possam receber outras funções por parâmetro.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">porCadaUm</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> funcao</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">funcao</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> numeros <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">porCadaUm</span><span class="token punctuation">(</span>numeros<span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-&gt; Nesse exemplo, quando a função <code>porCadaUm</code> chamar o argumento <code>funcao</code>, ele irá executar a função que foi passada nos parâmetros na hora da chamada da função.</p><h4 id="atribuindo-funcao-criada" tabindex="-1"><a class="header-anchor" href="#atribuindo-funcao-criada" aria-hidden="true">#</a> Atribuindo função criada</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> numeros <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">porCadaUm</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> funcao</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">funcao</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">acumular</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    total <span class="token operator">+=</span> num
<span class="token punctuation">}</span>

<span class="token function">porCadaUm</span><span class="token punctuation">(</span>numeros<span class="token punctuation">,</span> acumular<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-&gt; Nesse exemplo, ao invés de retornar um console.log que já é uma função nativa, ele está retornando uma função criada no próprio código.</p><h4 id="usando-arrow-function" tabindex="-1"><a class="header-anchor" href="#usando-arrow-function" aria-hidden="true">#</a> Usando arrow function</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> quadrados <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> numeros <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">porCadaUm</span><span class="token punctuation">(</span><span class="token parameter">array<span class="token punctuation">,</span> funcao</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">funcao</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">porCadaUm</span><span class="token punctuation">(</span>numeros<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    quadrados<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>o <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>quadrados<span class="token punctuation">)</span> <span class="token comment">// [2, 4, 6, 8]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-&gt; Nesse exemplo, ao invés de referenciar uma função nos parâmetros, ele está construindo uma arrow function diretamente nos parâmetros, que fará o mesmo efeito e executará corretamente.</p><p>É comum definir a função diretamente sobre o parâmetro como uma função anônima, aproveitando a sintaxe de arrow function (função seta). Isso permite definir ações mais dinâmicas.</p><h2 id="metodos-de-busca-e-transformacao" tabindex="-1"><a class="header-anchor" href="#metodos-de-busca-e-transformacao" aria-hidden="true">#</a> Métodos de busca e transformação</h2><h3 id="metodos-de-busca" tabindex="-1"><a class="header-anchor" href="#metodos-de-busca" aria-hidden="true">#</a> Métodos de Busca:</h3><ol><li><p><strong><code>forEach</code>:</strong></p><ul><li><strong>Descrição:</strong> Itera sobre os elementos de um array e executa uma função para cada elemento.</li><li><strong>Exemplo:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elemento</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Código para cada elemento</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Exemplo prático:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numeros <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>

numeros<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>
<span class="token comment">// 4</span>
<span class="token comment">// 5</span>
<span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>find</code>:</strong></p><ul><li><strong>Descrição:</strong> Retorna o primeiro elemento do array que satisfaça uma condição especificada.</li><li><strong>Exemplo:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cursos <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Javascript&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;ReactJS&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">22000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> resultado <span class="token operator">=</span> cursos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>nome <span class="token operator">===</span> <span class="token string">&quot;ReactJS&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> resultado2 <span class="token operator">=</span> cursos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>nome <span class="token operator">===</span> <span class="token string">&quot;Python&quot;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultado<span class="token punctuation">)</span> <span class="token comment">// {nome: &#39;ReactJS&#39;, preco: 22000}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultado2<span class="token punctuation">)</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Exemplo prático:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> encontrado <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elemento</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> elemento <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>filter</code>:</strong></p><ul><li><strong>Descrição:</strong> Cria um novo array com todos os elementos que passam por um teste especificado.</li><li><strong>Exemplo:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> filtrado <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elemento</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> elemento <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Exemplo prático:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cursos <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;ReactJS&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">22000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;AngularJS&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">22000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;Dev Web&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">16000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> resultado <span class="token operator">=</span> cursos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>nome<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;JS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> resultado2 <span class="token operator">=</span> cursos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>preco <span class="token operator">&lt;</span> <span class="token number">14000</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultado<span class="token punctuation">)</span>
<span class="token comment">//[{nome: &quot;ReactJS&quot;, preco: 22000},</span>
<span class="token comment">//{nome: &quot;AngularJS&quot;, preco: 22000}]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultado2<span class="token punctuation">)</span> <span class="token comment">// []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>some</code>:</strong></p><ul><li><strong>Descrição:</strong> Verifica se pelo menos um elemento do array satisfaz uma condição.</li><li><strong>Exemplo:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> algumMaiorQueDez <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elemento</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> elemento <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Exemplo prático:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cursos <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;ReactJS&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">22000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;AngularJS&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">22000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;Dev Web&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">16000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cursos<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>nome <span class="token operator">==</span> <span class="token string">&quot;Dev Web&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cursos<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">.</span>nome <span class="token operator">==</span> <span class="token string">&quot;VueJS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><h3 id="metodos-de-transformacao" tabindex="-1"><a class="header-anchor" href="#metodos-de-transformacao" aria-hidden="true">#</a> Métodos de Transformação:</h3><ol><li><p><strong><code>map</code>:</strong></p><ul><li><strong>Descrição:</strong> Cria um novo array com os resultados de chamar uma função para cada elemento.</li><li><strong>Exemplo:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> mapeado <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">elemento</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> elemento <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Exemplo prático:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> cursos <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;JavaScript&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">15000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;ReactJS&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">22000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;AngularJS&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">22000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&quot;Dev Web&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">16000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> atualizado <span class="token operator">=</span> cursos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">nome</span><span class="token operator">:</span> o<span class="token punctuation">.</span>nome<span class="token punctuation">,</span>
       <span class="token literal-property property">preco</span><span class="token operator">:</span> o<span class="token punctuation">.</span>preco <span class="token operator">*</span> <span class="token number">1.25</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>atualizado<span class="token punctuation">)</span>
<span class="token comment">/* [
   { nome: &#39;JavaScript&#39;, preco: 18750 },
   { nome: &#39;ReactJS&#39;, preco: 27500 },
   { nome: &#39;AngularJS&#39;, preco: 27500 },
   { nome: &#39;Dev Web&#39;, preco: 20000 }
] */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>reduce</code>:</strong></p><ul><li><strong>Descrição:</strong> Executa uma função redutora (fornecida por você) para cada elemento do array, resultando em um único valor acumulado.</li><li><strong>Exemplo:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> somatorio <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">acumulador<span class="token punctuation">,</span> elemento</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> acumulador <span class="token operator">+</span> elemento<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Exemplo prático:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> minhaCompra <span class="token operator">=</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;Dev Web&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">20000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">18750</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span> <span class="token literal-property property">nome</span><span class="token operator">:</span> <span class="token string">&#39;ReactJS&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">preco</span><span class="token operator">:</span> <span class="token number">27500</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> total <span class="token operator">=</span> minhaCompra<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">soma<span class="token punctuation">,</span> o</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> soma <span class="token operator">+</span> o<span class="token punctuation">.</span>preco<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span> <span class="token comment">// 66250</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>sort</code>:</strong></p><ul><li><strong>Descrição:</strong> Ordena os elementos de um array com base em uma função de comparação.</li><li><strong>Exemplo:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ordenado <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>Exemplo prático:</strong><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> numeros <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> crescente <span class="token operator">=</span> numeros<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>crescente<span class="token punctuation">)</span><span class="token comment">// [ 1, 5, 40, 200 ]</span>

<span class="token keyword">var</span> decrescente <span class="token operator">=</span> numeros<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>decrescente<span class="token punctuation">)</span> <span class="token comment">// [ 200, 40, 5, 1 ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>Cuidado! Esse método é destrutivo, ou seja, modifica o array sobre o qual é chamado.</p></blockquote></li></ol><p>Estes métodos são essenciais para realizar operações comuns em arrays, proporcionando uma forma mais expressiva e funcional de manipular dados em JavaScript.</p>`,41),t=[e];function c(l,i){return s(),a("div",null,t)}const k=n(o,[["render",c],["__file","supFunctions.html.vue"]]);export{k as default};
