import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as n,c as s,f as e}from"./app-6QF_qIwV.js";const o={},t=e(`<h1 id="ciclos-e-iteracoes" tabindex="-1"><a class="header-anchor" href="#ciclos-e-iteracoes" aria-hidden="true">#</a> Ciclos e iterações</h1><p>Os ciclos, também conhecidos como laços, loops ou iterações, são uma forma rápida e simples de fazer algo repetidamente.</p><p>Se temos que fazer alguma operação no programa mais de uma vez, de forma consecutiva, usaremos as estruturas de loop do JavaScript: for, while ou do...while.</p><p>Vamos analisar a sintaxe de cada um dos principais laços de repetição em JavaScript: &quot;for&quot;, &quot;while&quot;, e &quot;do-while&quot;.</p><h2 id="lacos-de-repeticao" tabindex="-1"><a class="header-anchor" href="#lacos-de-repeticao" aria-hidden="true">#</a> Laços de Repetição</h2><h3 id="_1-for-loop" tabindex="-1"><a class="header-anchor" href="#_1-for-loop" aria-hidden="true">#</a> 1. <strong>For Loop:</strong></h3><p>O laço &quot;for&quot; é frequentemente utilizado quando o número de iterações é conhecido antecipadamente.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>inicialização<span class="token punctuation">;</span> condição<span class="token punctuation">;</span> expressão de incremento<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Bloco de código a ser repetido</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Inicialização:</strong> Declaração e/ou atribuição da variável de controle.</li><li><strong>Condição:</strong> A execução do bloco de código continua enquanto essa condição for verdadeira.</li><li><strong>Expressão de Incremento/Decremento:</strong> Operação que modifica a variável de controle a cada iteração.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-while-loop" tabindex="-1"><a class="header-anchor" href="#_2-while-loop" aria-hidden="true">#</a> 2. <strong>While Loop:</strong></h3><p>O laço &quot;while&quot; é utilizado quando o número de iterações não é conhecido antecipadamente e depende de uma condição booleana.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>condição<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Bloco de código a ser repetido</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Condição:</strong> A execução do bloco de código continua enquanto essa condição for verdadeira.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cuidado-com-whille" tabindex="-1"><a class="header-anchor" href="#cuidado-com-whille" aria-hidden="true">#</a> Cuidado com Whille</h4><p><code>while (true)</code> é uma construção comumente utilizada para criar um loop infinito em linguagens de programação. A expressão <code>true</code> sempre será verdadeira, portanto, o bloco de código associado ao <code>while (true)</code> continuará a ser executado indefinidamente, a menos que seja interrompido por alguma instrução dentro do bloco ou por algum controle externo.</p><p>No entanto, o uso de loops infinitos, especialmente <code>while (true)</code>, pode levar a problemas sérios, como loops que não terminam, travamento de programas e alto consumo de recursos do sistema. Aqui estão alguns dos problemas associados a loops infinitos usando <code>while (true)</code>:</p><ol><li><p><strong>Loop Infinito Acidental:</strong></p><ul><li>É fácil criar um loop infinito acidentalmente se não houver uma instrução dentro do bloco do loop que eventualmente altere a condição para falsa. Isso pode ocorrer devido a erros de lógica ou condições que nunca são atendidas.</li></ul><p>Exemplo de loop infinito acidental:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Bloco de código sem instrução para alterar a condição</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Consumo Excessivo de Recursos:</strong></p><ul><li>Loops infinitos consomem recursos da CPU continuamente, o que pode levar a um desempenho ruim do sistema. Em casos extremos, isso pode até mesmo travar a execução do programa.</li></ul></li><li><p><strong>Não Libera Recursos:</strong></p><ul><li>Se um loop infinito estiver executando em um programa que utiliza recursos externos (como conexões de rede, arquivos, etc.), esses recursos podem não ser liberados adequadamente, resultando em vazamentos de recursos.</li></ul></li><li><p><strong>Travamento de Aplicações:</strong></p><ul><li>Em situações onde o loop infinito não é tratado corretamente, ele pode levar ao travamento completo da aplicação ou do sistema.</li></ul></li></ol><p>É importante ter cuidado ao usar <code>while (true)</code> e garantir que haja uma lógica adequada dentro do bloco do loop para eventualmente alterar a condição para falsa. Caso contrário, é recomendável usar construções de loop que têm condições de parada mais explícitas e controladas.</p><h3 id="_3-do-while-loop" tabindex="-1"><a class="header-anchor" href="#_3-do-while-loop" aria-hidden="true">#</a> 3. <strong>Do-While Loop:</strong></h3><p>Semelhante ao &quot;while&quot;, mas garante que o bloco de código seja executado pelo menos uma vez antes de verificar a condição.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// Bloco de código a ser repetido</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condição<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Condição:</strong> A execução do bloco de código continua enquanto essa condição for verdadeira.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Essas são as estruturas básicas dos laços de repetição em JavaScript. Cada tipo de laço tem sua aplicação específica, e a escolha entre eles depende das necessidades do problema a ser resolvido.</p><h2 id="controle-de-fluxo" tabindex="-1"><a class="header-anchor" href="#controle-de-fluxo" aria-hidden="true">#</a> Controle de Fluxo</h2><p>Os controles de fluxo são instruções que alteram o comportamento normal da execução dos laços de repetição em JavaScript. Essas instruções são fundamentais para tomar decisões dentro do loop e personalizar o fluxo de execução. Os controles de fluxo mais comuns são &quot;break&quot; e &quot;continue&quot;.</p><h3 id="_1-break" tabindex="-1"><a class="header-anchor" href="#_1-break" aria-hidden="true">#</a> 1. <strong>Break:</strong></h3><p>A instrução &quot;break&quot; é utilizada para interromper a execução do loop imediatamente quando uma condição específica é atendida. Isso é útil para sair antecipadamente de um loop quando uma determinada condição é satisfeita.</p><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// O loop é interrompido quando i atinge 5</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-continue" tabindex="-1"><a class="header-anchor" href="#_2-continue" aria-hidden="true">#</a> 2. <strong>Continue:</strong></h3><p>A instrução &quot;continue&quot; é usada para pular a iteração atual do loop e continuar com a próxima iteração. Isso é útil quando se deseja ignorar parte do código em uma iteração específica.</p><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// Pula a iteração quando i é igual a 2</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-rotulagem-labeling" tabindex="-1"><a class="header-anchor" href="#_3-rotulagem-labeling" aria-hidden="true">#</a> 3. <strong>Rotulagem (Labeling):</strong></h3><p>JavaScript também permite rotular loops, o que pode ser útil ao usar loops aninhados. Um rótulo é um identificador seguido por dois pontos (<code>:</code>), colocado antes do loop. Em seguida, você pode usar &quot;break&quot; e &quot;continue&quot; com o rótulo para afetar um loop específico.</p><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">outerLoop</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span> outerLoop<span class="token punctuation">;</span> <span class="token comment">// Interrompe o loop externo quando i é 1 e j é 1</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">i: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, j: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Estes controles de fluxo adicionam flexibilidade aos laços de repetição, permitindo ajustar o comportamento do loop com base em condições específicas. Eles são ferramentas poderosas para lidar com casos especiais e otimizar a execução do código.</p>`,44),p=[t];function i(c,l){return n(),s("div",null,p)}const d=a(o,[["render",i],["__file","cycle.html.vue"]]);export{d as default};
