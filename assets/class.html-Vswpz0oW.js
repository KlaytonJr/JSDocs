import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as s,c as n,f as e}from"./app-nb1Fahdj.js";const o={},t=e(`<h1 id="classes" tabindex="-1"><a class="header-anchor" href="#classes" aria-hidden="true">#</a> Classes</h1><h3 id="introducao-as-classes" tabindex="-1"><a class="header-anchor" href="#introducao-as-classes" aria-hidden="true">#</a> Introdução às Classes:</h3><ul><li>Classes são uma forma de criar objetos em JavaScript usando uma sintaxe mais orientada a objetos.</li><li>Introduzido no ECMAScript 2015 (ES6), as classes fornecem uma sintaxe mais clara e orientada a objetos para a criação de objetos e herança.</li></ul><h3 id="sintaxe-de-uma-classe" tabindex="-1"><a class="header-anchor" href="#sintaxe-de-uma-classe" aria-hidden="true">#</a> Sintaxe de uma Classe:</h3><ul><li>A declaração de uma classe inclui um construtor e métodos associados.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Pessoa</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">nome<span class="token punctuation">,</span> idade</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">=</span> nome<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>idade <span class="token operator">=</span> idade<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">saudacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Olá, meu nome é </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>nome<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> e tenho </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>idade<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> anos.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> pessoa1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pessoa</span><span class="token punctuation">(</span><span class="token string">&quot;Maria&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
pessoa1<span class="token punctuation">.</span><span class="token function">saudacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Olá, meu nome é Maria e tenho 30 anos.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="construtor" tabindex="-1"><a class="header-anchor" href="#construtor" aria-hidden="true">#</a> Construtor:</h3><ul><li>O método <code>constructor</code> é chamado automaticamente quando uma instância da classe é criada.</li><li>É usado para inicializar as propriedades do objeto.</li></ul><h3 id="metodos-e-propriedades" tabindex="-1"><a class="header-anchor" href="#metodos-e-propriedades" aria-hidden="true">#</a> Métodos e Propriedades:</h3><ul><li>Métodos são funções definidas dentro da classe.</li><li>Propriedades são variáveis associadas à classe e geralmente são inicializadas no construtor.</li></ul><h3 id="heranca-em-classes" tabindex="-1"><a class="header-anchor" href="#heranca-em-classes" aria-hidden="true">#</a> Herança em Classes:</h3><ul><li>Classes suportam herança, permitindo que uma classe herde propriedades e métodos de outra.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Estudante</span> <span class="token keyword">extends</span> <span class="token class-name">Pessoa</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">nome<span class="token punctuation">,</span> idade<span class="token punctuation">,</span> curso</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>nome<span class="token punctuation">,</span> idade<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Chama o construtor da classe pai</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>curso <span class="token operator">=</span> curso<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">estudar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>nome<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> está estudando </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>curso<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> estudante1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Estudante</span><span class="token punctuation">(</span><span class="token string">&quot;João&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&quot;Matemática&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
estudante1<span class="token punctuation">.</span><span class="token function">saudacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Herda método da classe Pessoa logo Saída: Olá, meu nome é João e tenho 25 anos.</span>
estudante1<span class="token punctuation">.</span><span class="token function">estudar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: João está estudando Matemática.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="palavra-chave-super" tabindex="-1"><a class="header-anchor" href="#palavra-chave-super" aria-hidden="true">#</a> Palavra-chave <code>super</code>:</h3><ul><li>A palavra-chave <code>super</code> é usada para chamar métodos da classe pai em uma classe filha.</li></ul><h3 id="metodo-estatico" tabindex="-1"><a class="header-anchor" href="#metodo-estatico" aria-hidden="true">#</a> Método Estático:</h3><ul><li>Um método estático é chamado na classe, não em uma instância.</li><li>Definido usando a palavra-chave <code>static</code>.</li></ul><p>Exemplo:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Utilitario</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token function">somar</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Utilitario<span class="token punctuation">.</span><span class="token function">somar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: 8</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tipos-de-variaveis" tabindex="-1"><a class="header-anchor" href="#tipos-de-variaveis" aria-hidden="true">#</a> Tipos de variáveis</h3><p>Em JavaScript, até a versão ES2021, o suporte nativo para modificadores de acesso (<code>public</code>, <code>private</code>, <code>protected</code>) não é totalmente fornecido. No entanto, a proposta de campos privados de classe (Class Fields) permite a simulação de propriedades privadas com o uso de cerquilha (<code>#</code>).</p><p>Vale notar que essa funcionalidade está presente em navegadores modernos e ambientes que suportam ES6 e versões mais recentes. Dito isso, vejamos como simular os diferentes tipos de variáveis em classes:</p><h3 id="_1-variaveis-publicas" tabindex="-1"><a class="header-anchor" href="#_1-variaveis-publicas" aria-hidden="true">#</a> 1. <strong>Variáveis Públicas:</strong></h3><ul><li>Não há uma palavra-chave explícita para declarar variáveis públicas. Todas as variáveis declaradas dentro da classe sem o uso de <code>#</code> são públicas.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Exemplo</span> <span class="token punctuation">{</span>
    propPublica <span class="token operator">=</span> <span class="token string">&quot;Variável pública&quot;</span><span class="token punctuation">;</span>

    <span class="token function">mostrarPublica</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propPublica<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> objeto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exemplo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objeto<span class="token punctuation">.</span>propPublica<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Variável pública</span>
objeto<span class="token punctuation">.</span><span class="token function">mostrarPublica</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Variável pública</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-variaveis-privadas" tabindex="-1"><a class="header-anchor" href="#_2-variaveis-privadas" aria-hidden="true">#</a> 2. <strong>Variáveis Privadas:</strong></h3><ul><li>Usando a proposta de campos privados de classe, você pode simular variáveis privadas adicionando <code>#</code> antes do nome da variável.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Exemplo</span> <span class="token punctuation">{</span>
    #propPrivada <span class="token operator">=</span> <span class="token string">&quot;Variável privada&quot;</span><span class="token punctuation">;</span>

    <span class="token function">mostrarPrivada</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#propPrivada<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> objeto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exemplo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(objeto.#propPrivada); // Erro: SyntaxError</span>
objeto<span class="token punctuation">.</span><span class="token function">mostrarPrivada</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Variável privada</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-variaveis-protegidas" tabindex="-1"><a class="header-anchor" href="#_3-variaveis-protegidas" aria-hidden="true">#</a> 3. <strong>Variáveis Protegidas:</strong></h3><ul><li>Atualmente, não há suporte nativo para variáveis protegidas em JavaScript. No entanto, você pode simular encapsulamento protegido por meio de convenções de nomenclatura (por exemplo, prefixar com <code>_</code>).</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Exemplo</span> <span class="token punctuation">{</span>
    _propProtegida <span class="token operator">=</span> <span class="token string">&quot;Variável protegida&quot;</span><span class="token punctuation">;</span>

    <span class="token function">mostrarProtegida</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_propProtegida<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> objeto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exemplo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// console.log(objeto._propProtegida); // Pode ser acessada, mas é uma convenção, não uma restrição real</span>
objeto<span class="token punctuation">.</span><span class="token function">mostrarProtegida</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Saída: Variável protegida</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resumo" tabindex="-1"><a class="header-anchor" href="#resumo" aria-hidden="true">#</a> Resumo:</h3><ul><li><strong>Públicas (<code>public</code>):</strong> Variáveis declaradas sem <code>#</code> são públicas e podem ser acessadas de fora da classe.</li><li><strong>Privadas (<code>private</code>):</strong> Usando <code>#</code> antes do nome da variável, simula-se uma variável privada, acessível apenas dentro da classe.</li><li><strong>Protegidas (<code>protected</code>):</strong> Atualmente, não há suporte nativo. A convenção de nomenclatura, como prefixar com <code>_</code>, pode indicar proteção, mas não impede o acesso.</li></ul><p>É importante observar que esses conceitos são mais convenções e simulações, uma vez que o JavaScript não fornece suporte nativo para modificadores de acesso. O uso adequado dessas convenções ajuda a garantir um código mais seguro e de fácil manutenção.</p>`,36),p=[t];function c(i,l){return s(),n("div",null,p)}const d=a(o,[["render",c],["__file","class.html.vue"]]);export{d as default};
