import{_ as n}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as s,f as o}from"./app-dAsMf_Ww.js";const e={},t=o(`<h1 id="escopo" tabindex="-1"><a class="header-anchor" href="#escopo" aria-hidden="true">#</a> Escopo</h1><p>O escopo em JavaScript refere-se à visibilidade e acessibilidade de variáveis em diferentes partes do código. Existem dois tipos principais de escopo: escopo global e escopo local.</p><h3 id="escopo-global" tabindex="-1"><a class="header-anchor" href="#escopo-global" aria-hidden="true">#</a> Escopo Global:</h3><ol><li><p><strong>Variáveis Globais:</strong></p><ul><li>Declaradas fora de qualquer função.</li><li>Acessíveis em todo o código, incluindo dentro de funções.</li></ul></li><li><p><strong>Acessibilidade:</strong></p><ul><li>Variáveis globais podem ser acessadas de qualquer lugar no código.</li></ul></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> globalVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">exemplo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Acesso à variável global</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="escopo-local" tabindex="-1"><a class="header-anchor" href="#escopo-local" aria-hidden="true">#</a> Escopo Local:</h3><ol><li><p><strong>Variáveis Locais:</strong></p><ul><li>Declaradas dentro de uma função.</li><li>Limitadas ao escopo da função em que foram declaradas.</li></ul></li><li><p><strong>Acessibilidade:</strong></p><ul><li>Variáveis locais não são acessíveis fora da função.</li></ul></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exemplo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> localVar <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Acesso à variável local</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Erro: localVar não definida fora da função</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="hosting" tabindex="-1"><a class="header-anchor" href="#hosting" aria-hidden="true">#</a> Hosting</h3><p>O hoisting é um comportamento presente no JavaScript que faz com que declarações de variáveis e funções sejam &quot;elevadas&quot; para o topo do escopo em que são definidas.</p><p>Isso significa que, independentemente de onde uma declaração de variável ou função apareça no código, ela será tratada como se estivesse no topo do escopo.</p><p>Enquanto o escopo se refere à visibilidade, o contexto se refere ao valor de this (“este”), ou seja, elemento atual em que se está escrevendo o código.</p><p>Em uma analogia, pensando em nosso mundo, o contexto nada mais é do que o “espaço” que determinada variável ocupa no ambiente (variável no sentido mais amplo, podendo ser uma função também).</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//Original:</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">//Interpretação:</span>
<span class="token keyword">var</span> x<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="escopo-do-var" tabindex="-1"><a class="header-anchor" href="#escopo-do-var" aria-hidden="true">#</a> Escopo do <code>var</code>:</h3><ol><li><p><strong>Escopo de Função:</strong></p><ul><li><code>var</code> tem escopo de função, o que significa que é acessível em toda a função onde foi declarado.</li><li>Não tem escopo de bloco, o que pode levar a problemas de vazamento de variáveis.</li></ul></li><li><p><strong>Içamento (Hoisting):</strong></p><ul><li>Declarações <code>var</code> são &quot;içadas&quot; para o topo do seu contexto de execução durante a fase de compilação.</li><li>Isso significa que você pode acessar a variável mesmo antes da sua declaração no código.</li></ul></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exemplo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> localVar <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Acesso à variável mesmo antes da declaração</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Acesso à variável fora do bloco</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Problemas com o <code>var</code>:</strong></p><ul><li>Pode levar a vazamento de variáveis, pois não respeita o escopo de bloco.</li><li>Difícil de rastrear e entender em situações mais complexas.</li></ul></li><li><p><strong>Exemplo de Vazamento de Variável:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">exemploVazamento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> vazamentoVar <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vazamentoVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Acesso à variável mesmo fora do bloco</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>O uso do <code>var</code> tem sido desencorajado em favor do <code>let</code> e <code>const</code> desde a introdução do ECMAScript 6, pois esses últimos fornecem um comportamento mais previsível e seguro em relação ao escopo de bloco.</p><h3 id="escopo-de-bloco-a-partir-do-ecmascript-6" tabindex="-1"><a class="header-anchor" href="#escopo-de-bloco-a-partir-do-ecmascript-6" aria-hidden="true">#</a> Escopo de Bloco (a partir do ECMAScript 6):</h3><ol><li><p><strong><code>let</code> e <code>const</code>:</strong></p><ul><li><code>let</code> e <code>const</code> introduzem escopo de bloco.</li><li>Variáveis declaradas com <code>let</code> e <code>const</code> são limitadas ao bloco em que foram definidas.</li></ul></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> blockVar <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> constVar <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blockVar<span class="token punctuation">,</span> constVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Acesso às variáveis dentro do bloco</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>blockVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Erro: blockVar não definida fora do bloco</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>constVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Erro: constVar não definida fora do bloco</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="escopo-aninhado" tabindex="-1"><a class="header-anchor" href="#escopo-aninhado" aria-hidden="true">#</a> Escopo Aninhado:</h3><ol><li><p><strong>Funções Dentro de Funções:</strong></p><ul><li>Funções podem ser aninhadas, e o escopo é hierárquico.</li></ul></li><li><p><strong>Exemplo:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">externa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> externaVar <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">interna</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> internaVar <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>externaVar<span class="token punctuation">,</span> internaVar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">interna</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// console.log(externaVar); // Erro: externaVar não definida fora da função externa</span>
<span class="token comment">// console.log(internaVar); // Erro: internaVar não definida fora da função interna</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>O entendimento do escopo é crucial para evitar problemas como vazamento de variáveis e garantir que as variáveis sejam utilizadas de maneira apropriada em diferentes partes do código JavaScript.</p><h3 id="resumo" tabindex="-1"><a class="header-anchor" href="#resumo" aria-hidden="true">#</a> Resumo</h3><p>Aqui está a tabela com as informações fornecidas sobre <code>var</code>, <code>const</code>, e <code>let</code> em relação a escopo, global ou local, bloco, redeclarar, reatribuir, e hoisting:</p><table><thead><tr><th></th><th><code>var</code></th><th><code>const</code></th><th><code>let</code></th></tr></thead><tbody><tr><td><strong>Escopo</strong></td><td>Função</td><td>Bloco</td><td>Bloco</td></tr><tr><td><strong>Global ou Local</strong></td><td>Ambos</td><td>Local</td><td>Local</td></tr><tr><td><strong>Bloco</strong></td><td>Não</td><td>Sim</td><td>Sim</td></tr><tr><td><strong>Redeclarar</strong></td><td>Sim</td><td>Não</td><td>Não</td></tr><tr><td><strong>Reatribuir</strong></td><td>Sim</td><td>Não</td><td>Sim</td></tr><tr><td><strong>Hoisting</strong></td><td>Sim</td><td>Não</td><td>Não</td></tr></tbody></table><p>Essa tabela resume as principais características e comportamentos associados a cada uma dessas palavras-chave em JavaScript.</p>`,24),c=[t];function i(p,l){return a(),s("div",null,c)}const u=n(e,[["render",i],["__file","scope.html.vue"]]);export{u as default};
